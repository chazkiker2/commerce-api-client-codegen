/* tslint:disable */
/* eslint-disable */
/**
 * Commerce API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface FoolCommerceDtoAccount
 */
export interface FoolCommerceDtoAccount {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoAccount
     */
    'uid'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoAccount
     */
    'email'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoBillingAddress}
     * @memberof FoolCommerceDtoAccount
     */
    'billingAddress'?: FoolCommerceDtoBillingAddress;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoAccount
     */
    'phoneNumber'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoPaymentMethod}
     * @memberof FoolCommerceDtoAccount
     */
    'defaultPaymentMethod'?: FoolCommerceDtoPaymentMethod;
    /**
     *
     * @type {Array<FoolCommerceDtoPaymentMethod>}
     * @memberof FoolCommerceDtoAccount
     */
    'allPaymentMethods'?: Array<FoolCommerceDtoPaymentMethod> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoAccountSnapshotDTO
 */
export interface FoolCommerceDtoAccountSnapshotDTO {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoAccountSnapshotDTO
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoAccountSnapshotDTO
     */
    'uid'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoAccountSnapshotDTO
     */
    'dateJoined'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoAccountSnapshotDTO
     */
    'paymentMethodType'?: FoolCommerceDtoAccountSnapshotDTOPaymentMethodTypeEnum;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoAccountSnapshotDTO
     */
    'nextRenewalDate'?: string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoAccountSnapshotDTO
     */
    'nextRenewalAmount'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoAccountSnapshotDTO
     */
    'autoRenewEnabled'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoAccountSnapshotDTO
     */
    'creditCardType'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoAccountSnapshotDTO
     */
    'lastFourDigits'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoAccountSnapshotDTO
     */
    'firstSixDigits'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoAccountSnapshotDTO
     */
    'expirationMonth'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoAccountSnapshotDTO
     */
    'expirationYear'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoAccountSnapshotDTO
     */
    'expiration'?: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum FoolCommerceDtoAccountSnapshotDTOPaymentMethodTypeEnum {
    CreditCard = 'CreditCard',
    ElectronicCheck = 'ElectronicCheck',
    ApplePay = 'ApplePay',
    Any = 'Any'
}

/**
 *
 * @export
 * @interface FoolCommerceDtoAddressSpecificQuoteRequest
 */
export interface FoolCommerceDtoAddressSpecificQuoteRequest {
    /**
     *
     * @type {FoolCommerceDtoTaxesTaxAddress}
     * @memberof FoolCommerceDtoAddressSpecificQuoteRequest
     */
    'taxAddress': FoolCommerceDtoTaxesTaxAddress;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoAddressSpecificQuoteRequest
     */
    'promotionCode': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoAddressSpecificQuoteRequest
     */
    'countryCode': string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoAddressSpecificQuoteRequest
     */
    'uid'?: number | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoApplePayForm
 */
export interface FoolCommerceDtoApplePayForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayForm
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayForm
     */
    'nameOnCard'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayForm
     */
    'creditCardType'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayForm
     */
    'lastFourDigits'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayForm
     */
    'postalCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayForm
     */
    'pkPaymentToken'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoApplePayForm
     */
    'expirationMonth'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoApplePayForm
     */
    'expirationYear'?: number | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoApplePayOrderForm
 */
export interface FoolCommerceDtoApplePayOrderForm {
    /**
     *
     * @type {FoolCommerceDtoApplePayForm}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'applePay': FoolCommerceDtoApplePayForm;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'confirmEmail': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'promotionCode': string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'selectedOfferId': number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'isoAlpha2CountryCode': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'phoneNumber'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoPostalAddressForm}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'billingAddress'?: FoolCommerceDtoPostalAddressForm;
    /**
     *
     * @type {FoolCommerceDtoPostalAddressForm}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'shippingAddress'?: FoolCommerceDtoPostalAddressForm;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'sourceCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'clientIpAddress'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'isTestOrder'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'uid'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'isNewAccount'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'placedByUid'?: number | null;
    /**
     *
     * @type {FoolCommerceDtoTrackingOrderSession}
     * @memberof FoolCommerceDtoApplePayOrderForm
     */
    'orderSession'?: FoolCommerceDtoTrackingOrderSession;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoAudienceTypeDTO
 */
export interface FoolCommerceDtoAudienceTypeDTO {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoAudienceTypeDTO
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoAudienceTypeDTO
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoBillingActivityDTO
 */
export interface FoolCommerceDtoBillingActivityDTO {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoBillingActivityDTO
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoBillingActivityDTO
     */
    'uid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoBillingActivityDTO
     */
    'subscriptionId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoBillingActivityDTO
     */
    'comment'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoBillingActivityDTO
     */
    'accountAction'?: FoolCommerceDtoBillingActivityDTOAccountActionEnum;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoBillingActivityDTO
     */
    'actionBy'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoBillingActivityDTO
     */
    'dateOccured'?: string;
    /**
     *
     * @type {FoolCommerceDtoAccountSnapshotDTO}
     * @memberof FoolCommerceDtoBillingActivityDTO
     */
    'accountSnapshot'?: FoolCommerceDtoAccountSnapshotDTO;
}

/**
    * @export
    * @enum {string}
    */
export enum FoolCommerceDtoBillingActivityDTOAccountActionEnum {
    CardAdded = 'CardAdded',
    CardUpdated = 'CardUpdated',
    CardDeleted = 'CardDeleted',
    BillingAddressAdded = 'BillingAddressAdded',
    BillingAddressUpdated = 'BillingAddressUpdated',
    BillingAddressDeleted = 'BillingAddressDeleted',
    AccountChargeSucceeded = 'AccountChargeSucceeded',
    AccountChargeFailed = 'AccountChargeFailed',
    AccountRefundSucceeded = 'AccountRefundSucceeded',
    AccountRefundFailure = 'AccountRefundFailure',
    SubscriptionExpired = 'SubscriptionExpired',
    SubscriptionRenewed = 'SubscriptionRenewed',
    SubscriptionPutInGrace = 'SubscriptionPutInGrace',
    SubscriptionCancelled = 'SubscriptionCancelled',
    RenewalNoticeSent = 'RenewalNoticeSent',
    VoidSucceeded = 'VoidSucceeded',
    VoidFailed = 'VoidFailed'
}

/**
 *
 * @export
 * @interface FoolCommerceDtoBillingAddress
 */
export interface FoolCommerceDtoBillingAddress {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoBillingAddress
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoBillingAddress
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoBillingAddress
     */
    'address1'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoBillingAddress
     */
    'address2'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoBillingAddress
     */
    'city'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoBillingAddress
     */
    'county'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoBillingAddress
     */
    'state'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoBillingAddress
     */
    'postalCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoBillingAddress
     */
    'country'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoBillingPhoneNumber
 */
export interface FoolCommerceDtoBillingPhoneNumber {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoBillingPhoneNumber
     */
    'phoneNumber'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoBulkUserDiscountForm
 */
export interface FoolCommerceDtoBulkUserDiscountForm {
    /**
     *
     * @type {Array<FoolCommerceDtoUidValueDiscountForm>}
     * @memberof FoolCommerceDtoBulkUserDiscountForm
     */
    'uidDiscountForms': Array<FoolCommerceDtoUidValueDiscountForm>;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCancellationDetails
 */
export interface FoolCommerceDtoCancellationDetails {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCancellationDetails
     */
    'date'?: string;
    /**
     *
     * @type {FoolCommerceDtoReasonForCancelling}
     * @memberof FoolCommerceDtoCancellationDetails
     */
    'reasonForCancelling'?: FoolCommerceDtoReasonForCancelling;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCancellationDetails
     */
    'notes'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoChangeLog
 */
export interface FoolCommerceDtoChangeLog {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoChangeLog
     */
    'adminUid'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoChangeLog
     */
    'adminName'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoChangeLog
     */
    'uid'?: number;
    /**
     *
     * @type {FoolCommerceDtoChangeType}
     * @memberof FoolCommerceDtoChangeLog
     */
    'changeType'?: FoolCommerceDtoChangeType;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoChangeLog
     */
    'dateAdded'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoChangeLog
     */
    'comment'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoChangeLog
     */
    'detail'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoChangeLog
     */
    'subscriptionId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoChangeLog
     */
    'productItemId'?: number | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoChangeType
 */
export interface FoolCommerceDtoChangeType {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoChangeType
     */
    'id'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoChangeType
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCompOrderForm
 */
export interface FoolCommerceDtoCompOrderForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'confirmEmail': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'promotionCode': string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'selectedOfferId': number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'isoAlpha2CountryCode': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'phoneNumber'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoPostalAddressForm}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'billingAddress'?: FoolCommerceDtoPostalAddressForm;
    /**
     *
     * @type {FoolCommerceDtoPostalAddressForm}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'shippingAddress'?: FoolCommerceDtoPostalAddressForm;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'sourceCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'clientIpAddress'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'isTestOrder'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'uid'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'isNewAccount'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'placedByUid'?: number | null;
    /**
     *
     * @type {FoolCommerceDtoTrackingOrderSession}
     * @memberof FoolCommerceDtoCompOrderForm
     */
    'orderSession'?: FoolCommerceDtoTrackingOrderSession;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreateDiscountForm
 */
export interface FoolCommerceDtoCreateDiscountForm {
    /**
     *
     * @type {Array<number>}
     * @memberof FoolCommerceDtoCreateDiscountForm
     */
    'productIds'?: Array<number> | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreateDiscountForm
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreateDiscountForm
     */
    'expirationDate'?: string;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreatePromotionForm
 */
export interface FoolCommerceDtoCreatePromotionForm {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreatePromotionForm
     */
    'teasedPremiumProductId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreatePromotionForm
     */
    'createdByUid'?: number;
    /**
     *
     * @type {Array<FoolCommerceDtoSingleItemOfferForm>}
     * @memberof FoolCommerceDtoCreatePromotionForm
     */
    'singleItemOffers'?: Array<FoolCommerceDtoSingleItemOfferForm> | null;
    /**
     *
     * @type {Array<FoolCommerceDtoSubscriptionOfferForm>}
     * @memberof FoolCommerceDtoCreatePromotionForm
     */
    'subscriptionOffers'?: Array<FoolCommerceDtoSubscriptionOfferForm> | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreatePromotionForm
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreatePromotionForm
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreatePromotionForm
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreatePromotionForm
     */
    'endDate'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoRedirectSettings}
     * @memberof FoolCommerceDtoCreatePromotionForm
     */
    'redirectSettings'?: FoolCommerceDtoRedirectSettings;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreatePromotionForm
     */
    'campaignId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreatePromotionForm
     */
    'audienceType'?: FoolCommerceDtoCreatePromotionFormAudienceTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FoolCommerceDtoCreatePromotionFormAudienceTypeEnum {
    NewMember = 'NewMember',
    Retention = 'Retention',
    Acquisition = 'Acquisition'
}

/**
 *
 * @export
 * @interface FoolCommerceDtoCreateSingleItemProductForm
 */
export interface FoolCommerceDtoCreateSingleItemProductForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreateSingleItemProductForm
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreateSingleItemProductForm
     */
    'introductionDate'?: string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreateSingleItemProductForm
     */
    'createdByUid'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreateSingleItemProductForm
     */
    'availableForSale'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreateSingleItemProductForm
     */
    'basePrice'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreateSingleItemProductForm
     */
    'acquisitionPrice'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreateSingleItemProductForm
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreateSingleItemProductForm
     */
    'url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreateSingleItemProductForm
     */
    'primaryTickers'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreateSingleItemProductForm
     */
    'description'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreateSingleItemProductForm
     */
    'defaultMoneyBackGuaranteeTimePeriodId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreateSingleItemProductForm
     */
    'orderConfirmationProgramId'?: number | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreateSubscriptionProductForm
 */
export interface FoolCommerceDtoCreateSubscriptionProductForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreateSubscriptionProductForm
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreateSubscriptionProductForm
     */
    'introductionDate'?: string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreateSubscriptionProductForm
     */
    'createdByUid'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreateSubscriptionProductForm
     */
    'isBackEnd'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreateSubscriptionProductForm
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreateSubscriptionProductForm
     */
    'url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreateSubscriptionProductForm
     */
    'primaryTickers'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreateSubscriptionProductForm
     */
    'description'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreateSubscriptionProductForm
     */
    'defaultMoneyBackGuaranteeTimePeriodId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreateSubscriptionProductForm
     */
    'orderConfirmationProgramId'?: number | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreateSubscriptionProductTermForm
 */
export interface FoolCommerceDtoCreateSubscriptionProductTermForm {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreateSubscriptionProductTermForm
     */
    'timePeriodId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreateSubscriptionProductTermForm
     */
    'basePrice'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreateSubscriptionProductTermForm
     */
    'acquisitionPrice'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreateSubscriptionProductTermForm
     */
    'renewalPrice'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreateSubscriptionProductTermForm
     */
    'createdByUid'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditCard
 */
export interface FoolCommerceDtoCreditCard {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCard
     */
    'type'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditCard
     */
    'expirationMonth'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditCard
     */
    'expirationYear'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCard
     */
    'postalCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCard
     */
    'nameOnCard'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreditCard
     */
    'isSecurityCodeOnFile'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCard
     */
    'paymentMethodType'?: FoolCommerceDtoCreditCardPaymentMethodTypeEnum;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditCard
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCard
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCard
     */
    'lastFourDigits'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreditCard
     */
    'isDefault'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCard
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCard
     */
    'dateCreated'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCard
     */
    'customerName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCard
     */
    'creditCardType'?: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum FoolCommerceDtoCreditCardPaymentMethodTypeEnum {
    CreditCard = 'CreditCard',
    ElectronicCheck = 'ElectronicCheck',
    ApplePay = 'ApplePay',
    Any = 'Any'
}

/**
 *
 * @export
 * @interface FoolCommerceDtoCreditCardForm
 */
export interface FoolCommerceDtoCreditCardForm {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditCardForm
     */
    'cardNumber'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardForm
     */
    'nameOnCard'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditCardForm
     */
    'expirationMonth'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditCardForm
     */
    'expirationYear'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardForm
     */
    'postalCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardForm
     */
    'countryCode'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditCardMetadataForm
 */
export interface FoolCommerceDtoCreditCardMetadataForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardMetadataForm
     */
    'nameOnCard'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditCardMetadataForm
     */
    'expirationMonth'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditCardMetadataForm
     */
    'expirationYear'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardMetadataForm
     */
    'postalCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardMetadataForm
     */
    'countryCode'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditCardOrderForm
 */
export interface FoolCommerceDtoCreditCardOrderForm {
    /**
     *
     * @type {FoolCommerceDtoCreditCardForm}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'creditCard': FoolCommerceDtoCreditCardForm;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'confirmEmail': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'promotionCode': string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'selectedOfferId': number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'isoAlpha2CountryCode': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'phoneNumber'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoPostalAddressForm}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'billingAddress'?: FoolCommerceDtoPostalAddressForm;
    /**
     *
     * @type {FoolCommerceDtoPostalAddressForm}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'shippingAddress'?: FoolCommerceDtoPostalAddressForm;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'sourceCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'clientIpAddress'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'isTestOrder'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'uid'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'isNewAccount'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'placedByUid'?: number | null;
    /**
     *
     * @type {FoolCommerceDtoTrackingOrderSession}
     * @memberof FoolCommerceDtoCreditCardOrderForm
     */
    'orderSession'?: FoolCommerceDtoTrackingOrderSession;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditItem
 */
export interface FoolCommerceDtoCreditItem {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditItem
     */
    'creditType'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoProduct}
     * @memberof FoolCommerceDtoCreditItem
     */
    'product'?: FoolCommerceDtoProduct;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditItem
     */
    'amount'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditItem
     */
    'startDate'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditItem
     */
    'endDate'?: string;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditServiceAccountState
 */
export interface FoolCommerceDtoCreditServiceAccountState {
    /**
     *
     * @type {Array<FoolCommerceDtoCreditServiceSubscription>}
     * @memberof FoolCommerceDtoCreditServiceAccountState
     */
    'subscriptions'?: Array<FoolCommerceDtoCreditServiceSubscription> | null;
    /**
     *
     * @type {Array<object>}
     * @memberof FoolCommerceDtoCreditServiceAccountState
     */
    'reports'?: Array<object> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditServiceCreditTransferQuoteRequest
 */
export interface FoolCommerceDtoCreditServiceCreditTransferQuoteRequest {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteRequest
     */
    'uid': number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteRequest
     */
    'placedByUid'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteRequest
     */
    'dayToUseForProRating'?: string | null;
    /**
     *
     * @type {Array<FoolCommerceDtoCreditServiceTransferAction>}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteRequest
     */
    'transferActions'?: Array<FoolCommerceDtoCreditServiceTransferAction> | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteRequest
     */
    'allowExtensionTransfers'?: boolean;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
 */
export interface FoolCommerceDtoCreditServiceCreditTransferQuoteResponse {
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'currentValue'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'currentTaxValue'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'totalLiquidated'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'totalLiquidatedTax'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'totalPurchased'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'totalPurchasedTax'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'totalCreditCardPurchase'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'totalCreditCardRefund'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'dayToUseForProration'?: string;
    /**
     *
     * @type {FoolCommerceDtoCreditServiceAccountState}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'beforeState'?: FoolCommerceDtoCreditServiceAccountState;
    /**
     *
     * @type {FoolCommerceDtoCreditServiceAccountState}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'afterState'?: FoolCommerceDtoCreditServiceAccountState;
    /**
     *
     * @type {Array<FoolCommerceDtoCreditServiceTransferOperation>}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'transferOperations'?: Array<FoolCommerceDtoCreditServiceTransferOperation> | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'containsPurchasesForZeroDollars'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'canBeSettled'?: boolean;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof FoolCommerceDtoCreditServiceCreditTransferQuoteResponse
     */
    'duplicateTransferProducts'?: { [key: string]: string; } | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditServiceExecuteCreditTransferRequest
 */
export interface FoolCommerceDtoCreditServiceExecuteCreditTransferRequest {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceExecuteCreditTransferRequest
     */
    'uid': number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceExecuteCreditTransferRequest
     */
    'placedByUid'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceExecuteCreditTransferRequest
     */
    'dayToUseForProRating'?: string | null;
    /**
     *
     * @type {Array<FoolCommerceDtoCreditServiceTransferAction>}
     * @memberof FoolCommerceDtoCreditServiceExecuteCreditTransferRequest
     */
    'transferActions'?: Array<FoolCommerceDtoCreditServiceTransferAction> | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreditServiceExecuteCreditTransferRequest
     */
    'allowExtensionTransfers'?: boolean;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditServiceExecuteTransferOrderResponse
 */
export interface FoolCommerceDtoCreditServiceExecuteTransferOrderResponse {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceExecuteTransferOrderResponse
     */
    'orderId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceExecuteTransferOrderResponse
     */
    'uid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceExecuteTransferOrderResponse
     */
    'takenByUid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceExecuteTransferOrderResponse
     */
    'placedByUid'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceExecuteTransferOrderResponse
     */
    'memberId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceExecuteTransferOrderResponse
     */
    'promotionGuid'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceExecuteTransferOrderResponse
     */
    'productTermId'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreditServiceExecuteTransferOrderResponse
     */
    'autoRebill'?: boolean;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditServiceSubscription
 */
export interface FoolCommerceDtoCreditServiceSubscription {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'endDate'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'productName'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'productId'?: number;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'remainingValueBeforeTaxes'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'remainingValue'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'remainingTaxValue'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'fullValueBeforeTaxes'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'fullTaxValue'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'fullValue'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'isNew'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'promotion'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'offerId'?: number | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'autoRebill'?: boolean | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'campaignId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'mbgPeriod'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'swappedFromSubscriptionId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'currentSubPeriodStartDate'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceSubscription
     */
    'days'?: number | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditServiceSubscriptionTransferToResponse
 */
export interface FoolCommerceDtoCreditServiceSubscriptionTransferToResponse {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceSubscriptionTransferToResponse
     */
    'days'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceSubscriptionTransferToResponse
     */
    'promotionOfferId'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditServiceTransferAction
 */
export interface FoolCommerceDtoCreditServiceTransferAction {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceTransferAction
     */
    'actionType'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceTransferAction
     */
    'actionOrder'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditServiceTransferOperation
 */
export interface FoolCommerceDtoCreditServiceTransferOperation {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceTransferOperation
     */
    'actionType'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceTransferOperation
     */
    'actionOrder'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest
 */
export interface FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest
     */
    'uid'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest
     */
    'proRatedRefundIssued'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest
     */
    'refundDate'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusResponse
 */
export interface FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusResponse {
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusResponse
     */
    'success'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusResponse
     */
    'uid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusResponse
     */
    'numberOfProRatedRefundsIssued'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusResponse
     */
    'refundDate'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoDiscount
 */
export interface FoolCommerceDtoDiscount {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoDiscount
     */
    'discountId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoDiscount
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoDiscount
     */
    'expirationDate'?: string;
    /**
     *
     * @type {Array<FoolCommerceDtoDiscountItem>}
     * @memberof FoolCommerceDtoDiscount
     */
    'discountItems'?: Array<FoolCommerceDtoDiscountItem> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoDiscountItem
 */
export interface FoolCommerceDtoDiscountItem {
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoDiscountItem
     */
    'amount'?: FoolCommerceDtoMoney;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoDiscountOffer
 */
export interface FoolCommerceDtoDiscountOffer {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoDiscountOffer
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoDiscountOffer
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoDiscountOffer
     */
    'expirationDate'?: string;
    /**
     *
     * @type {Array<FoolCommerceDtoProduct>}
     * @memberof FoolCommerceDtoDiscountOffer
     */
    'products'?: Array<FoolCommerceDtoProduct> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoElectronicCheckForm
 */
export interface FoolCommerceDtoElectronicCheckForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoElectronicCheckForm
     */
    'accountHolderName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoElectronicCheckForm
     */
    'accountNumber'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoElectronicCheckForm
     */
    'routingNumber'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoElectronicCheckForm
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoElectronicCheckForm
     */
    'accountType'?: FoolCommerceDtoElectronicCheckFormAccountTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FoolCommerceDtoElectronicCheckFormAccountTypeEnum {
    Checking = 'Checking',
    Savings = 'Savings'
}

/**
 *
 * @export
 * @interface FoolCommerceDtoElectronicCheckOrderForm
 */
export interface FoolCommerceDtoElectronicCheckOrderForm {
    /**
     *
     * @type {FoolCommerceDtoElectronicCheckForm}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'electronicCheck': FoolCommerceDtoElectronicCheckForm;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'confirmEmail': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'promotionCode': string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'selectedOfferId': number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'isoAlpha2CountryCode': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'phoneNumber'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoPostalAddressForm}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'billingAddress'?: FoolCommerceDtoPostalAddressForm;
    /**
     *
     * @type {FoolCommerceDtoPostalAddressForm}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'shippingAddress'?: FoolCommerceDtoPostalAddressForm;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'sourceCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'clientIpAddress'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'isTestOrder'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'uid'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'isNewAccount'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'placedByUid'?: number | null;
    /**
     *
     * @type {FoolCommerceDtoTrackingOrderSession}
     * @memberof FoolCommerceDtoElectronicCheckOrderForm
     */
    'orderSession'?: FoolCommerceDtoTrackingOrderSession;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoFraudRiskOrderDetail
 */
export interface FoolCommerceDtoFraudRiskOrderDetail {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoFraudRiskOrderDetail
     */
    'uid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoFraudRiskOrderDetail
     */
    'numberOfPaymentMethods'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoFraudRiskOrderDetail
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoFraudRiskOrderDetail
     */
    'sourceCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoFraudRiskOrderDetail
     */
    'clientIpAddress'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoFraudRiskOrderDetail
     */
    'numberOfOrders'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoFraudRiskOrderDetail
     */
    'numberOfSuccessfulOrders'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoFraudRiskOrderDetail
     */
    'numberOfFailedOrders'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoFraudRiskOrderDetail
     */
    'firstOrderDate'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoFraudRiskOrderDetail
     */
    'lastOrderDate'?: string;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoHelpdeskAction
 */
export interface FoolCommerceDtoHelpdeskAction {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskAction
     */
    'field'?: string | null;
    /**
     *
     * @type {Array<string>}
     * @memberof FoolCommerceDtoHelpdeskAction
     */
    'value'?: Array<string> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoHelpdeskComment
 */
export interface FoolCommerceDtoHelpdeskComment {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskComment
     */
    'id'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskComment
     */
    'type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskComment
     */
    'body'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskComment
     */
    'htmlBody'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskComment
     */
    'plainBody'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoHelpdeskComment
     */
    'public'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskComment
     */
    'authorId'?: number | null;
    /**
     *
     * @type {Array<string>}
     * @memberof FoolCommerceDtoHelpdeskComment
     */
    'uploads'?: Array<string> | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskComment
     */
    'createdAt'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoHelpdeskCustomField
 */
export interface FoolCommerceDtoHelpdeskCustomField {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskCustomField
     */
    'fieldName'?: string | null;
    /**
     *
     * @type {any}
     * @memberof FoolCommerceDtoHelpdeskCustomField
     */
    'value'?: any | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoHelpdeskMacro
 */
export interface FoolCommerceDtoHelpdeskMacro {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskMacro
     */
    'url'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskMacro
     */
    'id'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskMacro
     */
    'title'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoHelpdeskMacro
     */
    'active'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskMacro
     */
    'updatedAt'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskMacro
     */
    'createdAt'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoHelpdeskRestriction}
     * @memberof FoolCommerceDtoHelpdeskMacro
     */
    'restriction'?: FoolCommerceDtoHelpdeskRestriction;
    /**
     *
     * @type {Array<FoolCommerceDtoHelpdeskAction>}
     * @memberof FoolCommerceDtoHelpdeskMacro
     */
    'actions'?: Array<FoolCommerceDtoHelpdeskAction> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoHelpdeskRequester
 */
export interface FoolCommerceDtoHelpdeskRequester {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskRequester
     */
    'localeId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskRequester
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskRequester
     */
    'email'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoHelpdeskRestriction
 */
export interface FoolCommerceDtoHelpdeskRestriction {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskRestriction
     */
    'type'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskRestriction
     */
    'id'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoHelpdeskTicket
 */
export interface FoolCommerceDtoHelpdeskTicket {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'id'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'createdAt'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'updatedAt'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'externalId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'subject'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'priority'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'status'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'recipient'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'requesterId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'submitterId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'assigneeId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'organizationId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'groupId'?: number | null;
    /**
     *
     * @type {Array<number>}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'collaboratorIds'?: Array<number> | null;
    /**
     *
     * @type {Array<string>}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'collaboratorEmails'?: Array<string> | null;
    /**
     *
     * @type {any}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'forumTopicId'?: any | null;
    /**
     *
     * @type {any}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'problemId'?: any | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'hasIncidents'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'dueAt'?: string | null;
    /**
     *
     * @type {Array<string>}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'tags'?: Array<string> | null;
    /**
     *
     * @type {Array<FoolCommerceDtoHelpdeskCustomField>}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'customFields'?: Array<FoolCommerceDtoHelpdeskCustomField> | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'workflowStatus'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'workflowStatusCode'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'isPendingAutomaticAdminProcessing'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'brandId'?: number | null;
    /**
     *
     * @type {FoolCommerceDtoHelpdeskComment}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'comment'?: FoolCommerceDtoHelpdeskComment;
    /**
     *
     * @type {FoolCommerceDtoHelpdeskRequester}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'requester'?: FoolCommerceDtoHelpdeskRequester;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'ticketFormId'?: number | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'isPublic'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'viaFollowupSourceId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'commentCount'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'incidentCount'?: number | null;
    /**
     *
     * @type {Array<number>}
     * @memberof FoolCommerceDtoHelpdeskTicket
     */
    'followUpIds'?: Array<number> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoHelpdeskTicketField
 */
export interface FoolCommerceDtoHelpdeskTicketField {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpdeskTicketField
     */
    'id'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicketField
     */
    'createdAt'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicketField
     */
    'url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicketField
     */
    'updatedAt'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoHelpdeskTicketField
     */
    'required'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoHelpdeskTicketField
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicketField
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicketField
     */
    'title'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoHelpdeskTicketField
     */
    'type'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoPromotionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
 */
export interface FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoPromotionFoolCommerceVersion0000CultureneutralPublicKeyTokennull {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoPromotionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
     */
    'offset'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoPromotionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
     */
    'limit'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoPromotionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
     */
    'totalResults'?: number;
    /**
     *
     * @type {Array<FoolCommerceDtoPromotion>}
     * @memberof FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoPromotionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
     */
    'results'?: Array<FoolCommerceDtoPromotion> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSingleItemProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
 */
export interface FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSingleItemProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSingleItemProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
     */
    'offset'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSingleItemProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
     */
    'limit'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSingleItemProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
     */
    'totalResults'?: number;
    /**
     *
     * @type {Array<FoolCommerceDtoSingleItemProductDescription>}
     * @memberof FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSingleItemProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
     */
    'results'?: Array<FoolCommerceDtoSingleItemProductDescription> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSubscriptionProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
 */
export interface FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSubscriptionProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSubscriptionProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
     */
    'offset'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSubscriptionProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
     */
    'limit'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSubscriptionProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
     */
    'totalResults'?: number;
    /**
     *
     * @type {Array<FoolCommerceDtoSubscriptionProductDescription>}
     * @memberof FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSubscriptionProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull
     */
    'results'?: Array<FoolCommerceDtoSubscriptionProductDescription> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoInvoice
 */
export interface FoolCommerceDtoInvoice {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoInvoice
     */
    'invoiceId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoInvoice
     */
    'invoiceDate'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoInvoice
     */
    'totalPrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoInvoice
     */
    'totalPayments'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoInvoice
     */
    'cashPayments'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoInvoice
     */
    'creditPayments'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoInvoice
     */
    'taxPayments'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoInvoice
     */
    'subtotalAfterDiscountsAfterTaxes'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoInvoice
     */
    'subtotalAfterDiscountsBeforeTaxes'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoInvoice
     */
    'totalTaxesPaid'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoInvoice
     */
    'totalDiscounts'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {Array<FoolCommerceDtoCreditItem>}
     * @memberof FoolCommerceDtoInvoice
     */
    'creditItems'?: Array<FoolCommerceDtoCreditItem> | null;
    /**
     *
     * @type {Array<FoolCommerceDtoDiscount>}
     * @memberof FoolCommerceDtoInvoice
     */
    'discounts'?: Array<FoolCommerceDtoDiscount> | null;
    /**
     *
     * @type {Array<FoolCommerceDtoPayment>}
     * @memberof FoolCommerceDtoInvoice
     */
    'payments'?: Array<FoolCommerceDtoPayment> | null;
    /**
     *
     * @type {Array<FoolCommerceDtoRefundDetail>}
     * @memberof FoolCommerceDtoInvoice
     */
    'refunds'?: Array<FoolCommerceDtoRefundDetail> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoLockUserPurchasesForm
 */
export interface FoolCommerceDtoLockUserPurchasesForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoLockUserPurchasesForm
     */
    'lockoutEndDate'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoLockUserPurchasesForm
     */
    'lockedByAdminUid': number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoLockUserPurchasesForm
     */
    'lockedComment'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoMemberActionsMemberSubscriptionActionForm
 */
export interface FoolCommerceDtoMemberActionsMemberSubscriptionActionForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoMemberActionsMemberSubscriptionActionForm
     */
    'action'?: FoolCommerceDtoMemberActionsMemberSubscriptionActionFormActionEnum;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoMemberActionsMemberSubscriptionActionForm
     */
    'reason'?: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum FoolCommerceDtoMemberActionsMemberSubscriptionActionFormActionEnum {
    TurnOffAutoRenewal = 'TurnOffAutoRenewal',
    CancelSubscription = 'CancelSubscription',
    SwapServices = 'SwapServices',
    EnableAutoRenewal = 'EnableAutoRenewal'
}

/**
 *
 * @export
 * @interface FoolCommerceDtoMemberActionsMemberSubscriptionActionResponse
 */
export interface FoolCommerceDtoMemberActionsMemberSubscriptionActionResponse {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoMemberActionsMemberSubscriptionActionResponse
     */
    'actionResult'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoMmsCreatePasswordEmailSendHistory
 */
export interface FoolCommerceDtoMmsCreatePasswordEmailSendHistory {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoMmsCreatePasswordEmailSendHistory
     */
    'email'?: string | null;
    /**
     *
     * @type {Array<string>}
     * @memberof FoolCommerceDtoMmsCreatePasswordEmailSendHistory
     */
    'send_dates'?: Array<string> | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoMmsCreatePasswordEmailSendHistory
     */
    'shouldSendCreatePasswordEmail'?: boolean;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoMoney
 */
export interface FoolCommerceDtoMoney {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoMoney
     */
    'currencyCode': string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoMoney
     */
    'amount': number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoOffer
 */
export interface FoolCommerceDtoOffer {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOffer
     */
    'type'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOffer
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOffer
     */
    'name'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoProduct}
     * @memberof FoolCommerceDtoOffer
     */
    'product'?: FoolCommerceDtoProduct;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOffer
     */
    'fulfillmentUrl'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoOffer
     */
    'isPreselected'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOffer
     */
    'offerMarkup'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoOffer
     */
    'basePrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoOffer
     */
    'acquisitionPrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {Array<FoolCommerceDtoPremium>}
     * @memberof FoolCommerceDtoOffer
     */
    'premiums'?: Array<FoolCommerceDtoPremium> | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOffer
     */
    'totalOrders'?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof FoolCommerceDtoOffer
     */
    'tags'?: Array<string> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoOfferQuote
 */
export interface FoolCommerceDtoOfferQuote {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'name'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'isBundle'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'description'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'basePrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'hasDiscount'?: boolean;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'finalPrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'discountPercent'?: number;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'discountedPrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'discountAmount'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'amountDue'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'amountDueForTaxLookup'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'amountDueWithCredits'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'amountTaxesDue'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'taxAgnosticAmountDue'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'isPreselected'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'isComplimentary'?: boolean;
    /**
     *
     * @type {FoolCommerceDtoProduct}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'product'?: FoolCommerceDtoProduct;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'offerMarkup'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoTaxesPromotionQuoteTaxInformation}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'promotionQuoteTaxInformation'?: FoolCommerceDtoTaxesPromotionQuoteTaxInformation;
    /**
     *
     * @type {Array<FoolCommerceDtoPremium>}
     * @memberof FoolCommerceDtoOfferQuote
     */
    'premiums'?: Array<FoolCommerceDtoPremium> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoOrder
 */
export interface FoolCommerceDtoOrder {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrder
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrder
     */
    'status'?: FoolCommerceDtoOrderStatusEnum;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrder
     */
    'date'?: string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrder
     */
    'takenByUid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrder
     */
    'placedByUid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrder
     */
    'billToUid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrder
     */
    'deliverToUid'?: number;
    /**
     *
     * @type {FoolCommerceDtoPromotion}
     * @memberof FoolCommerceDtoOrder
     */
    'promotion'?: FoolCommerceDtoPromotion;
    /**
     *
     * @type {FoolCommerceDtoPaymentMethod}
     * @memberof FoolCommerceDtoOrder
     */
    'paymentMethod'?: FoolCommerceDtoPaymentMethod;
    /**
     *
     * @type {FoolCommerceDtoOrderItem}
     * @memberof FoolCommerceDtoOrder
     */
    'item'?: FoolCommerceDtoOrderItem;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrder
     */
    'amount'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrder
     */
    'taxAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrder
     */
    'creditAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrder
     */
    'amountCharged'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrder
     */
    'clientIpAddress'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrder
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrder
     */
    'sourceCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrder
     */
    'affluence'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrder
     */
    'orderReceiptJson'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoOffer}
     * @memberof FoolCommerceDtoOrder
     */
    'offer'?: FoolCommerceDtoOffer;
}

/**
    * @export
    * @enum {string}
    */
export enum FoolCommerceDtoOrderStatusEnum {
    Pending = 'Pending',
    Completed = 'Completed',
    AuthorizationFailure = 'AuthorizationFailure',
    AuthorizationError = 'AuthorizationError'
}

/**
 *
 * @export
 * @interface FoolCommerceDtoOrderConfirmation
 */
export interface FoolCommerceDtoOrderConfirmation {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrderConfirmation
     */
    'orderId': number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrderConfirmation
     */
    'uid': number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrderConfirmation
     */
    'accountId'?: string;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoOrderConfirmation
     */
    'isNewAccount': boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrderConfirmation
     */
    'memberId': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrderConfirmation
     */
    'promotionCode': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrderConfirmation
     */
    'productTermId'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrderConfirmation
     */
    'productId'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoOrderItem
 */
export interface FoolCommerceDtoOrderItem {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrderItem
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrderItem
     */
    'quantity'?: number;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoOrderItem
     */
    'unitPrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrderItem
     */
    'creditAmount'?: number;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoOrderItem
     */
    'amount'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrderItem
     */
    'taxAmount'?: number;
    /**
     *
     * @type {FoolCommerceDtoProduct}
     * @memberof FoolCommerceDtoOrderItem
     */
    'product'?: FoolCommerceDtoProduct;
    /**
     *
     * @type {Array<FoolCommerceDtoPremiumOffer>}
     * @memberof FoolCommerceDtoOrderItem
     */
    'premiums'?: Array<FoolCommerceDtoPremiumOffer> | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoOrderItem
     */
    'isTrial'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoOrderItem
     */
    'isComplimentary'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrderItem
     */
    'type'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoOffer}
     * @memberof FoolCommerceDtoOrderItem
     */
    'offer'?: FoolCommerceDtoOffer;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoOrderReceipt
 */
export interface FoolCommerceDtoOrderReceipt {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrderReceipt
     */
    'orderId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrderReceipt
     */
    'orderDate'?: string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrderReceipt
     */
    'promotionId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrderReceipt
     */
    'campaignId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrderReceipt
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrderReceipt
     */
    'startDate'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoOrderReceipt
     */
    'endDate'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrderReceipt
     */
    'deliverToUid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoOrderReceipt
     */
    'billToUid'?: number;
    /**
     *
     * @type {FoolCommerceDtoRegistrationUser}
     * @memberof FoolCommerceDtoOrderReceipt
     */
    'billToCustomer'?: FoolCommerceDtoRegistrationUser;
    /**
     *
     * @type {FoolCommerceDtoBillingAddress}
     * @memberof FoolCommerceDtoOrderReceipt
     */
    'billingAddress'?: FoolCommerceDtoBillingAddress;
    /**
     *
     * @type {FoolCommerceDtoOrderItem}
     * @memberof FoolCommerceDtoOrderReceipt
     */
    'orderItem'?: FoolCommerceDtoOrderItem;
    /**
     *
     * @type {FoolCommerceDtoInvoice}
     * @memberof FoolCommerceDtoOrderReceipt
     */
    'invoice'?: FoolCommerceDtoInvoice;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoParentProductOwnedByUid
 */
export interface FoolCommerceDtoParentProductOwnedByUid {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoParentProductOwnedByUid
     */
    'subscriptionId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoParentProductOwnedByUid
     */
    'orderId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoParentProductOwnedByUid
     */
    'startDate'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoParentProductOwnedByUid
     */
    'endDate'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoParentProductOwnedByUid
     */
    'productId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoParentProductOwnedByUid
     */
    'productName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoParentProductOwnedByUid
     */
    'productType'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoParentProductOwnedByUid
     */
    'acquisitionMethod'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoParentProductOwnedByUid
     */
    'autoRebill'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoParentProductOwnedByUid
     */
    'inGrace'?: boolean;
    /**
     *
     * @type {Array<FoolCommerceDtoProductOwnedByUid>}
     * @memberof FoolCommerceDtoParentProductOwnedByUid
     */
    'componentOrEntitledProducts'?: Array<FoolCommerceDtoProductOwnedByUid> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoPayment
 */
export interface FoolCommerceDtoPayment {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPayment
     */
    'paymentId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPayment
     */
    'type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPayment
     */
    'referenceNumber'?: string | null;
    /**
     *
     * @type {Array<FoolCommerceDtoPaymentItem>}
     * @memberof FoolCommerceDtoPayment
     */
    'paymentItems'?: Array<FoolCommerceDtoPaymentItem> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoPaymentItem
 */
export interface FoolCommerceDtoPaymentItem {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPaymentItem
     */
    'amount'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPaymentItem
     */
    'taxAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPaymentItem
     */
    'amountBeforeTaxes'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentItem
     */
    'customerName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentItem
     */
    'paymentMethodDescription'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoPaymentMethod
 */
export interface FoolCommerceDtoPaymentMethod {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPaymentMethod
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethod
     */
    'paymentMethodType'?: FoolCommerceDtoPaymentMethodPaymentMethodTypeEnum;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethod
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethod
     */
    'lastFourDigits'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoPaymentMethod
     */
    'isDefault'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethod
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethod
     */
    'dateCreated'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethod
     */
    'customerName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethod
     */
    'creditCardType'?: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum FoolCommerceDtoPaymentMethodPaymentMethodTypeEnum {
    CreditCard = 'CreditCard',
    ElectronicCheck = 'ElectronicCheck',
    ApplePay = 'ApplePay',
    Any = 'Any'
}

/**
 *
 * @export
 * @interface FoolCommerceDtoPaymentMethodForm
 */
export interface FoolCommerceDtoPaymentMethodForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethodForm
     */
    'paymentMethodId'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoPaymentMethodOrderForm
 */
export interface FoolCommerceDtoPaymentMethodOrderForm {
    /**
     *
     * @type {FoolCommerceDtoPaymentMethodForm}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'paymentMethod': FoolCommerceDtoPaymentMethodForm;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'promotionCode': string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'selectedOfferId': number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'isoAlpha2CountryCode': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'phoneNumber'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoPostalAddressForm}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'billingAddress'?: FoolCommerceDtoPostalAddressForm;
    /**
     *
     * @type {FoolCommerceDtoPostalAddressForm}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'shippingAddress'?: FoolCommerceDtoPostalAddressForm;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'sourceCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'clientIpAddress'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'isTestOrder'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'uid'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'isNewAccount'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'placedByUid'?: number | null;
    /**
     *
     * @type {FoolCommerceDtoTrackingOrderSession}
     * @memberof FoolCommerceDtoPaymentMethodOrderForm
     */
    'orderSession'?: FoolCommerceDtoTrackingOrderSession;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoPostalAddressForm
 */
export interface FoolCommerceDtoPostalAddressForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPostalAddressForm
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPostalAddressForm
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPostalAddressForm
     */
    'address1'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPostalAddressForm
     */
    'address2'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPostalAddressForm
     */
    'city'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPostalAddressForm
     */
    'state'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPostalAddressForm
     */
    'postalCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPostalAddressForm
     */
    'county'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPostalAddressForm
     */
    'country'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPostalAddressForm
     */
    'phoneNumber'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoPremium
 */
export interface FoolCommerceDtoPremium {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPremium
     */
    'productId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPremium
     */
    'name': string;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoPremium
     */
    'value': FoolCommerceDtoMoney;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPremium
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPremium
     */
    'fulfillmentUrl'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoPremium
     */
    'wasTeased'?: boolean;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoPremiumOffer
 */
export interface FoolCommerceDtoPremiumOffer {
    /**
     *
     * @type {FoolCommerceDtoProduct}
     * @memberof FoolCommerceDtoPremiumOffer
     */
    'product'?: FoolCommerceDtoProduct;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPremiumOffer
     */
    'amount'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoPremiumOffer
     */
    'wasTeased'?: boolean;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoProRatedRefundEligible
 */
export interface FoolCommerceDtoProRatedRefundEligible {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoProRatedRefundEligible
     */
    'uid'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoProRatedRefundEligible
     */
    'refundDate'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoProRatedRefundEligible
     */
    'proRatedRefundIssued'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoProRatedRefundEligible
     */
    'isProRatedEligible'?: boolean;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoProduct
 */
export interface FoolCommerceDtoProduct {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoProduct
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoProduct
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoProduct
     */
    'url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoProduct
     */
    'secureUrl'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoProduct
     */
    'isBackEnd'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoProduct
     */
    'primaryTickers'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoTimePeriod}
     * @memberof FoolCommerceDtoProduct
     */
    'swapGuaranteePeriod'?: FoolCommerceDtoTimePeriod;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoProduct
     */
    'productType'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoProductOffer
 */
export interface FoolCommerceDtoProductOffer {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoProductOffer
     */
    'name'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoProduct}
     * @memberof FoolCommerceDtoProductOffer
     */
    'product'?: FoolCommerceDtoProduct;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoProductOffer
     */
    'basePrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoProductOffer
     */
    'acquisitionPrice'?: FoolCommerceDtoMoney;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoProductOwnedByUid
 */
export interface FoolCommerceDtoProductOwnedByUid {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoProductOwnedByUid
     */
    'subscriptionId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoProductOwnedByUid
     */
    'orderId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoProductOwnedByUid
     */
    'startDate'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoProductOwnedByUid
     */
    'endDate'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoProductOwnedByUid
     */
    'productId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoProductOwnedByUid
     */
    'productName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoProductOwnedByUid
     */
    'productType'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoProductOwnedByUid
     */
    'acquisitionMethod'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoProductOwnedByUid
     */
    'autoRebill'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoProductOwnedByUid
     */
    'inGrace'?: boolean;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoProductsOwnedByUid
 */
export interface FoolCommerceDtoProductsOwnedByUid {
    /**
     *
     * @type {Array<FoolCommerceDtoParentProductOwnedByUid>}
     * @memberof FoolCommerceDtoProductsOwnedByUid
     */
    'parentProductsOwned'?: Array<FoolCommerceDtoParentProductOwnedByUid> | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoProductsOwnedByUid
     */
    'uid'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoPromotion
 */
export interface FoolCommerceDtoPromotion {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPromotion
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPromotion
     */
    'code'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPromotion
     */
    'startDate'?: string;
    /**
     *
     * @type {Array<FoolCommerceDtoOffer>}
     * @memberof FoolCommerceDtoPromotion
     */
    'offers'?: Array<FoolCommerceDtoOffer> | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPromotion
     */
    'totalOrders'?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof FoolCommerceDtoPromotion
     */
    'tags'?: Array<string> | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPromotion
     */
    'modifiedByUid'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPromotion
     */
    'modifiedDate'?: string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPromotion
     */
    'createdByUid'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPromotion
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPromotion
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPromotion
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPromotion
     */
    'endDate'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoRedirectSettings}
     * @memberof FoolCommerceDtoPromotion
     */
    'redirectSettings'?: FoolCommerceDtoRedirectSettings;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPromotion
     */
    'campaignId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPromotion
     */
    'audienceType'?: FoolCommerceDtoPromotionAudienceTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FoolCommerceDtoPromotionAudienceTypeEnum {
    NewMember = 'NewMember',
    Retention = 'Retention',
    Acquisition = 'Acquisition'
}

/**
 *
 * @export
 * @interface FoolCommerceDtoPromotionQuoteDTO
 */
export interface FoolCommerceDtoPromotionQuoteDTO {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPromotionQuoteDTO
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPromotionQuoteDTO
     */
    'code'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPromotionQuoteDTO
     */
    'redirectCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPromotionQuoteDTO
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPromotionQuoteDTO
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPromotionQuoteDTO
     */
    'description'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoPromotionQuoteDTO
     */
    'hasRedirect'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoPromotionQuoteDTO
     */
    'redirectUrl'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoPromotionQuoteDTO
     */
    'campaignId'?: number | null;
    /**
     *
     * @type {Array<FoolCommerceDtoOfferQuote>}
     * @memberof FoolCommerceDtoPromotionQuoteDTO
     */
    'offers'?: Array<FoolCommerceDtoOfferQuote> | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoPromotionQuoteDTO
     */
    'productOwnedInLast90Days'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoPromotionQuoteDTO
     */
    'currentlyOwnsProduct'?: boolean;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoReasonForCancelling
 */
export interface FoolCommerceDtoReasonForCancelling {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoReasonForCancelling
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoReasonForCancelling
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoRedirectSettings
 */
export interface FoolCommerceDtoRedirectSettings {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoRedirectSettings
     */
    'redirectCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoRedirectSettings
     */
    'redirectUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoRedirectSettings
     */
    'redirectDate'?: string;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoRefund
 */
export interface FoolCommerceDtoRefund {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoRefund
     */
    'id'?: number;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoRefund
     */
    'amount'?: FoolCommerceDtoMoney;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoRefundDetail
 */
export interface FoolCommerceDtoRefundDetail {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoRefundDetail
     */
    'refundId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoRefundDetail
     */
    'customerName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoRefundDetail
     */
    'paymentMethodDescription'?: string | null;
    /**
     *
     * @type {Array<FoolCommerceDtoRefundItem>}
     * @memberof FoolCommerceDtoRefundDetail
     */
    'refundItems'?: Array<FoolCommerceDtoRefundItem> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoRefundItem
 */
export interface FoolCommerceDtoRefundItem {
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoRefundItem
     */
    'amount'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoRefundItem
     */
    'taxAmount'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoRefundItem
     */
    'amountBeforeTaxes'?: FoolCommerceDtoMoney;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoRegistrationPassword
 */
export interface FoolCommerceDtoRegistrationPassword {
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoRegistrationPassword
     */
    'isExpired'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoRegistrationPassword
     */
    'lastChanged'?: string;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoRegistrationUser
 */
export interface FoolCommerceDtoRegistrationUser {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoRegistrationUser
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoRegistrationUser
     */
    'accountId'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoRegistrationUser
     */
    'username'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoRegistrationUser
     */
    'email'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoRegistrationUser
     */
    'hasPassword'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoRegistrationUser
     */
    'isBlocked'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoRegistrationUser
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoRegistrationUser
     */
    'lastName'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoRegistrationPassword}
     * @memberof FoolCommerceDtoRegistrationUser
     */
    'password'?: FoolCommerceDtoRegistrationPassword;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoRegistrationUser
     */
    'largeAvatarUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoRegistrationUser
     */
    'smallAvatarUrl'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoRenewalProfile
 */
export interface FoolCommerceDtoRenewalProfile {
    /**
     *
     * @type {FoolCommerceDtoTimePeriod}
     * @memberof FoolCommerceDtoRenewalProfile
     */
    'renewalPeriod'?: FoolCommerceDtoTimePeriod;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoRenewalProfile
     */
    'basePrice'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoRenewalProfile
     */
    'cashDiscount'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoRenewalProfile
     */
    'percentageDiscount'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoRenewalProfile
     */
    'price'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSingleItem
 */
export interface FoolCommerceDtoSingleItem {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItem
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItem
     */
    'uid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItem
     */
    'orderId'?: number;
    /**
     *
     * @type {FoolCommerceDtoProduct}
     * @memberof FoolCommerceDtoSingleItem
     */
    'product'?: FoolCommerceDtoProduct;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItem
     */
    'remainingValue'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItem
     */
    'remainingTaxValue'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItem
     */
    'remainingValueBeforeTaxes'?: number;
    /**
     *
     * @type {Array<FoolCommerceDtoPaymentMethod>}
     * @memberof FoolCommerceDtoSingleItem
     */
    'paymentMethods'?: Array<FoolCommerceDtoPaymentMethod> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSingleItemOfferForm
 */
export interface FoolCommerceDtoSingleItemOfferForm {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItemOfferForm
     */
    'productId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSingleItemOfferForm
     */
    'offerMarkup'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSingleItemOfferForm
     */
    'fulfillmentUrl'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSingleItemOfferForm
     */
    'isPreselected'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItemOfferForm
     */
    'basePrice'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItemOfferForm
     */
    'acquisitionPrice'?: number | null;
    /**
     *
     * @type {Array<number>}
     * @memberof FoolCommerceDtoSingleItemOfferForm
     */
    'premiumProductIds'?: Array<number> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSingleItemProductDescription
 */
export interface FoolCommerceDtoSingleItemProductDescription {
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'availableForSale'?: boolean;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'basePrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'acquisitionPrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'shortName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'primaryTickers'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'description'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoTimePeriod}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'defaultMoneyBackGuaranteePeriod'?: FoolCommerceDtoTimePeriod;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'introductionDate'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'discontinuationDate'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'orderConfirmationProgramId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'createdByUid'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'dateCreated'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'lastUpdatedDate'?: string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'modifiedByUid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItemProductDescription
     */
    'productType'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSingleItemRefundForm
 */
export interface FoolCommerceDtoSingleItemRefundForm {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItemRefundForm
     */
    'paymentMethodId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItemRefundForm
     */
    'singleItemId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItemRefundForm
     */
    'adminUid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSingleItemRefundForm
     */
    'refundAmount'?: number | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSolrOfferDocument
 */
export interface FoolCommerceDtoSolrOfferDocument {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'offerDomain'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'promoId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'promoCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'promoName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'totalOrders'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'startDate'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'endDate'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'offerId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'offerName'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'acquisitionPrice'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'audienceType'?: FoolCommerceDtoSolrOfferDocumentAudienceTypeEnum;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'productName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'subscriptionTerm'?: string | null;
    /**
     *
     * @type {Array<string>}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'premiums'?: Array<string> | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'campaignId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'domain'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSolrOfferDocument
     */
    'searchText'?: string | null;
}

/**
    * @export
    * @enum {string}
    */
export enum FoolCommerceDtoSolrOfferDocumentAudienceTypeEnum {
    NewMember = 'NewMember',
    Retention = 'Retention',
    Acquisition = 'Acquisition'
}

/**
 *
 * @export
 * @interface FoolCommerceDtoSolrSearchResponse
 */
export interface FoolCommerceDtoSolrSearchResponse {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSolrSearchResponse
     */
    'numFound'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSolrSearchResponse
     */
    'start'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSolrSearchResponse
     */
    'end'?: number;
    /**
     *
     * @type {Array<FoolCommerceDtoSolrOfferDocument>}
     * @memberof FoolCommerceDtoSolrSearchResponse
     */
    'docs'?: Array<FoolCommerceDtoSolrOfferDocument> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSplitCreditCardOrderForm
 */
export interface FoolCommerceDtoSplitCreditCardOrderForm {
    /**
     *
     * @type {FoolCommerceDtoCreditCardForm}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'additionalCreditCard': FoolCommerceDtoCreditCardForm;
    /**
     *
     * @type {FoolCommerceDtoCreditCardForm}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'creditCard': FoolCommerceDtoCreditCardForm;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'confirmEmail': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'promotionCode': string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'selectedOfferId': number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'isoAlpha2CountryCode': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'phoneNumber'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoPostalAddressForm}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'billingAddress'?: FoolCommerceDtoPostalAddressForm;
    /**
     *
     * @type {FoolCommerceDtoPostalAddressForm}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'shippingAddress'?: FoolCommerceDtoPostalAddressForm;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'sourceCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'clientIpAddress'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'isTestOrder'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'uid'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'isNewAccount'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'placedByUid'?: number | null;
    /**
     *
     * @type {FoolCommerceDtoTrackingOrderSession}
     * @memberof FoolCommerceDtoSplitCreditCardOrderForm
     */
    'orderSession'?: FoolCommerceDtoTrackingOrderSession;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoStrictCreditCardForm
 */
export interface FoolCommerceDtoStrictCreditCardForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoStrictCreditCardForm
     */
    'cardSecurityCode': string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoStrictCreditCardForm
     */
    'cardNumber'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoStrictCreditCardForm
     */
    'nameOnCard'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoStrictCreditCardForm
     */
    'expirationMonth'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoStrictCreditCardForm
     */
    'expirationYear'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoStrictCreditCardForm
     */
    'postalCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoStrictCreditCardForm
     */
    'countryCode'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoStrictCreditCardOrderForm
 */
export interface FoolCommerceDtoStrictCreditCardOrderForm {
    /**
     *
     * @type {FoolCommerceDtoStrictCreditCardForm}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'creditCard': FoolCommerceDtoStrictCreditCardForm;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'confirmEmail': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'promotionCode': string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'selectedOfferId': number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'isoAlpha2CountryCode': string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'phoneNumber'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoPostalAddressForm}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'billingAddress'?: FoolCommerceDtoPostalAddressForm;
    /**
     *
     * @type {FoolCommerceDtoPostalAddressForm}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'shippingAddress'?: FoolCommerceDtoPostalAddressForm;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'sourceCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'clientIpAddress'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'isTestOrder'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'uid'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'isNewAccount'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'placedByUid'?: number | null;
    /**
     *
     * @type {FoolCommerceDtoTrackingOrderSession}
     * @memberof FoolCommerceDtoStrictCreditCardOrderForm
     */
    'orderSession'?: FoolCommerceDtoTrackingOrderSession;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSubscription
 */
export interface FoolCommerceDtoSubscription {
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscription
     */
    'canRequestSwapServices'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'orderId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'uid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'status'?: number;
    /**
     *
     * @type {Array<FoolCommerceDtoPremium>}
     * @memberof FoolCommerceDtoSubscription
     */
    'premiums'?: Array<FoolCommerceDtoPremium> | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscription
     */
    'statusName'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscription
     */
    'autoRebill'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscription
     */
    'startDate'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscription
     */
    'endDate'?: string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'productId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscription
     */
    'productName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscription
     */
    'productLevel'?: FoolCommerceDtoSubscriptionProductLevelEnum;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscription
     */
    'isInGracePeriod'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'campaignId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'daysRemaining'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscription
     */
    'gracePeriodEndDate'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscription
     */
    'cancellationDate'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoCancellationDetails}
     * @memberof FoolCommerceDtoSubscription
     */
    'cancellationDetails'?: FoolCommerceDtoCancellationDetails;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     * @deprecated
     */
    'moneyBackGuaranteeDaysLeft'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     * @deprecated
     */
    'daysSinceMoneyBackGuaranteeEnded'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscription
     * @deprecated
     */
    'moneyBackGuaranteeEndDate'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscription
     * @deprecated
     */
    'hasMoneyBackGuarantee'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscription
     * @deprecated
     */
    'isInMoneyBackGuaranteePeriod'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'refundEligibilityDaysLeft'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'daysSinceRefundEligibilityEnded'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscription
     */
    'refundEligibilityEndDate'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscription
     */
    'hasRefundEligibility'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscription
     */
    'isInRefundEligibilityPeriod'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscription
     */
    'refundAvailableEndDate'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscription
     */
    'isRefundAvailable'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscription
     */
    'displayToggleAutoRenewal'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscription
     */
    'canRequestTurnOffAutoRenewal'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscription
     */
    'canRequestEnableAutoRenewal'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscription
     */
    'canRequestCancelSubscription'?: boolean;
    /**
     *
     * @type {FoolCommerceDtoRenewalProfile}
     * @memberof FoolCommerceDtoSubscription
     */
    'renewalProfile'?: FoolCommerceDtoRenewalProfile;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'remainingValue'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'remainingValueBeforeTaxes'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'remainingTaxValue'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'fullValueBeforeTaxes'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'fullValue'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscription
     */
    'fullTaxValue'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscription
     */
    'currentSubPeriodStartDate'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscription
     */
    'mostRecentPeriodDateCreated'?: string;
    /**
     *
     * @type {Array<FoolCommerceDtoSubscriptionPeriod>}
     * @memberof FoolCommerceDtoSubscription
     */
    'subscriptionPeriods'?: Array<FoolCommerceDtoSubscriptionPeriod> | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscription
     * @deprecated
     */
    'isRefundAvailableForCurrentSubPeriod'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscription
     * @deprecated
     */
    'isInRefundEligibilityPeriodForCurrentSubPeriod'?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum FoolCommerceDtoSubscriptionProductLevelEnum {
    LevelOne = 'LevelOne',
    LevelTwo = 'LevelTwo',
    LevelThree = 'LevelThree',
    LevelFour = 'LevelFour',
    LevelFive = 'LevelFive'
}

/**
 *
 * @export
 * @interface FoolCommerceDtoSubscriptionCreditTransferRollbackForm
 */
export interface FoolCommerceDtoSubscriptionCreditTransferRollbackForm {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionCreditTransferRollbackForm
     */
    'subscriptionId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionCreditTransferRollbackForm
     */
    'adminUid'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSubscriptionCreditTransferRollbackResponse
 */
export interface FoolCommerceDtoSubscriptionCreditTransferRollbackResponse {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionCreditTransferRollbackResponse
     */
    'subscriptionId'?: number;
    /**
     *
     * @type {Array<FoolCommerceDtoSubscription>}
     * @memberof FoolCommerceDtoSubscriptionCreditTransferRollbackResponse
     */
    'reactivatedSubscriptions'?: Array<FoolCommerceDtoSubscription> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSubscriptionOffer
 */
export interface FoolCommerceDtoSubscriptionOffer {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'type'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoTrialOffer}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'trialOffer'?: FoolCommerceDtoTrialOffer;
    /**
     *
     * @type {FoolCommerceDtoTimePeriod}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'subscriptionPeriod'?: FoolCommerceDtoTimePeriod;
    /**
     *
     * @type {FoolCommerceDtoTimePeriod}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'moneyBackGuaranteePeriod'?: FoolCommerceDtoTimePeriod;
    /**
     *
     * @type {FoolCommerceDtoTimePeriod}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'swapGuaranteePeriod'?: FoolCommerceDtoTimePeriod;
    /**
     *
     * @type {FoolCommerceDtoTimePeriod}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'renewalRefundPeriod'?: FoolCommerceDtoTimePeriod;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'printDelivery'?: boolean;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'renewalPrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'name'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoProduct}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'product'?: FoolCommerceDtoProduct;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'fulfillmentUrl'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'isPreselected'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'offerMarkup'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'basePrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'acquisitionPrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {Array<FoolCommerceDtoPremium>}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'premiums'?: Array<FoolCommerceDtoPremium> | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'totalOrders'?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof FoolCommerceDtoSubscriptionOffer
     */
    'tags'?: Array<string> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSubscriptionOfferForm
 */
export interface FoolCommerceDtoSubscriptionOfferForm {
    /**
     *
     * @type {FoolCommerceDtoTrialOfferForm}
     * @memberof FoolCommerceDtoSubscriptionOfferForm
     */
    'trialOfferForm'?: FoolCommerceDtoTrialOfferForm;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionOfferForm
     */
    'subscriptionTimePeriodId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionOfferForm
     */
    'moneyBackGuaranteeTimePeriodId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionOfferForm
     */
    'swapGuaranteeTimePeriodId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionOfferForm
     */
    'renewalRefundTimePeriodId'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscriptionOfferForm
     */
    'printDelivery'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionOfferForm
     */
    'renewalPrice'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionOfferForm
     */
    'productId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionOfferForm
     */
    'offerMarkup'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionOfferForm
     */
    'fulfillmentUrl'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscriptionOfferForm
     */
    'isPreselected'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionOfferForm
     */
    'basePrice'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionOfferForm
     */
    'acquisitionPrice'?: number | null;
    /**
     *
     * @type {Array<number>}
     * @memberof FoolCommerceDtoSubscriptionOfferForm
     */
    'premiumProductIds'?: Array<number> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSubscriptionPeriod
 */
export interface FoolCommerceDtoSubscriptionPeriod {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'offerId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'promotionId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'promotionName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'type'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'orderId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'orderDate'?: string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'invoiceId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'dateCreated'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'pricePaid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'totalPurchaseValue'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'remainingValue'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'remainingTaxValue'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'remainingValueBeforeTaxes'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'netPayments'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'netTaxPayments'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'netPaymentsBeforeTaxes'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'totalCredits'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'totalRefunds'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'totalDebits'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'startDate'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'endDate'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'cancellationDate'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'termsAndConditionsId'?: number;
    /**
     *
     * @type {FoolCommerceDtoTimePeriod}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'moneyBackGuaranteePeriod'?: FoolCommerceDtoTimePeriod;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'daysSinceMoneyBackGuaranteeEnded'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'moneyBackGuaranteeEndDate'?: string | null;
    /**
     *
     * @type {Array<FoolCommerceDtoPaymentMethod>}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'paymentMethods'?: Array<FoolCommerceDtoPaymentMethod> | null;
    /**
     *
     * @type {FoolCommerceDtoTimePeriod}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'swapGuaranteePeriod'?: FoolCommerceDtoTimePeriod;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'hasRenewalRefundPeriod'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'renewalRefundPeriodEndDate'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'refundEligibilityEndDate'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'hasRefundEligibility'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'isInRefundEligibilityPeriod'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'refundEligibilityDaysLeft'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'daysSinceRefundEligibilityEnded'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'refundAvailableEndDate'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscriptionPeriod
     */
    'isRefundAvailable'?: boolean;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSubscriptionPeriodReceipt
 */
export interface FoolCommerceDtoSubscriptionPeriodReceipt {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'subscriptionPeriodId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'subscriptionPeriodType'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'dateCreated'?: string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'invoiceId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'renewalType'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'isRenewalSubscriptionPeriod'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'orderId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'orderDate'?: string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'promotionId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'campaignId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'startDate'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'endDate'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'deliverToUid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'billToUid'?: number;
    /**
     *
     * @type {FoolCommerceDtoRegistrationUser}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'billToCustomer'?: FoolCommerceDtoRegistrationUser;
    /**
     *
     * @type {FoolCommerceDtoBillingAddress}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'billingAddress'?: FoolCommerceDtoBillingAddress;
    /**
     *
     * @type {FoolCommerceDtoOrderItem}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'orderItem'?: FoolCommerceDtoOrderItem;
    /**
     *
     * @type {FoolCommerceDtoInvoice}
     * @memberof FoolCommerceDtoSubscriptionPeriodReceipt
     */
    'invoice'?: FoolCommerceDtoInvoice;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSubscriptionPeriodRefundForm
 */
export interface FoolCommerceDtoSubscriptionPeriodRefundForm {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriodRefundForm
     */
    'paymentMethodId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriodRefundForm
     */
    'subscriptionId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriodRefundForm
     */
    'subscriptionPeriodId'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscriptionPeriodRefundForm
     */
    'isProRatedRefund'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriodRefundForm
     */
    'adminUid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionPeriodRefundForm
     */
    'refundAmount'?: number | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSubscriptionProductDescription
 */
export interface FoolCommerceDtoSubscriptionProductDescription {
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'isBackEnd'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'initials'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoTimePeriod}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'swapGuaranteePeriod'?: FoolCommerceDtoTimePeriod;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'productLevel'?: FoolCommerceDtoSubscriptionProductDescriptionProductLevelEnum;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'shortName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'primaryTickers'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'description'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoTimePeriod}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'defaultMoneyBackGuaranteePeriod'?: FoolCommerceDtoTimePeriod;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'introductionDate'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'discontinuationDate'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'orderConfirmationProgramId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'createdByUid'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'dateCreated'?: string;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'lastUpdatedDate'?: string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'modifiedByUid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionProductDescription
     */
    'productType'?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum FoolCommerceDtoSubscriptionProductDescriptionProductLevelEnum {
    LevelOne = 'LevelOne',
    LevelTwo = 'LevelTwo',
    LevelThree = 'LevelThree',
    LevelFour = 'LevelFour',
    LevelFive = 'LevelFive'
}

/**
 *
 * @export
 * @interface FoolCommerceDtoSubscriptionProductOffer
 */
export interface FoolCommerceDtoSubscriptionProductOffer {
    /**
     *
     * @type {FoolCommerceDtoTimePeriod}
     * @memberof FoolCommerceDtoSubscriptionProductOffer
     */
    'subscriptionPeriod'?: FoolCommerceDtoTimePeriod;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoSubscriptionProductOffer
     */
    'renewalPrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionProductOffer
     */
    'name'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoProduct}
     * @memberof FoolCommerceDtoSubscriptionProductOffer
     */
    'product'?: FoolCommerceDtoProduct;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoSubscriptionProductOffer
     */
    'basePrice'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoSubscriptionProductOffer
     */
    'acquisitionPrice'?: FoolCommerceDtoMoney;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSubscriptionTransaction
 */
export interface FoolCommerceDtoSubscriptionTransaction {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'accountingTransactionId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'subscriptionPeriodId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'accountingTransactionType'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'amount'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'creditSubscriptionId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'creditSubscriptionPeriodId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'transactionDate'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'transactionUserName'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'transactionUserUid'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'creditSubscriptionName'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'transactionItemId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'orderid'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'responseCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'responseMsg'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionTransaction
     */
    'billToPaymentMethodId'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSubscriptionTransferRollbackForm
 */
export interface FoolCommerceDtoSubscriptionTransferRollbackForm {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionTransferRollbackForm
     */
    'paymentMethodId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionTransferRollbackForm
     */
    'subscriptionId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionTransferRollbackForm
     */
    'adminUid'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoSubscriptionTransferRollbackQuote
 */
export interface FoolCommerceDtoSubscriptionTransferRollbackQuote {
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoSubscriptionTransferRollbackQuote
     */
    'isEligible'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoSubscriptionTransferRollbackQuote
     */
    'refund'?: number;
    /**
     *
     * @type {Array<FoolCommerceDtoPaymentMethod>}
     * @memberof FoolCommerceDtoSubscriptionTransferRollbackQuote
     */
    'paymentMethods'?: Array<FoolCommerceDtoPaymentMethod> | null;
    /**
     *
     * @type {Array<FoolCommerceDtoSubscription>}
     * @memberof FoolCommerceDtoSubscriptionTransferRollbackQuote
     */
    'subscriptionsToRollback'?: Array<FoolCommerceDtoSubscription> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoTaxesPromotionQuoteTaxInformation
 */
export interface FoolCommerceDtoTaxesPromotionQuoteTaxInformation {
    /**
     *
     * @type {FoolCommerceDtoTaxesTaxAddress}
     * @memberof FoolCommerceDtoTaxesPromotionQuoteTaxInformation
     */
    'taxAddress'?: FoolCommerceDtoTaxesTaxAddress;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoTaxesPromotionQuoteTaxInformation
     */
    'isTaxable'?: boolean;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoTaxesTaxAddress
 */
export interface FoolCommerceDtoTaxesTaxAddress {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTaxesTaxAddress
     */
    'address1'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTaxesTaxAddress
     */
    'address2'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTaxesTaxAddress
     */
    'city'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTaxesTaxAddress
     */
    'stateProvince'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTaxesTaxAddress
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTaxesTaxAddress
     */
    'postalCode'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoTimePeriod
 */
export interface FoolCommerceDtoTimePeriod {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoTimePeriod
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoTimePeriod
     */
    'units'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoTimePeriod
     */
    'type'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTimePeriod
     */
    'typeName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTimePeriod
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoTimePeriodForm
 */
export interface FoolCommerceDtoTimePeriodForm {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoTimePeriodForm
     */
    'numberOfUnits'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTimePeriodForm
     */
    'unitType'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoTimePeriodForm
     */
    'createdBy'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoTimePeriodForm
     */
    'isValidForMoneyBackGuarantee'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoTimePeriodForm
     */
    'isValidForTrial'?: boolean;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoTrackingOrderSession
 */
export interface FoolCommerceDtoTrackingOrderSession {
    /**
     *
     * @type {FoolCommerceDtoTrackingUtmCode}
     * @memberof FoolCommerceDtoTrackingOrderSession
     */
    'utmCode'?: FoolCommerceDtoTrackingUtmCode;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTrackingOrderSession
     */
    'sessionGuid'?: string | null;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof FoolCommerceDtoTrackingOrderSession
     */
    'customMetadata'?: { [key: string]: string; } | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoTrackingUtmCode
 */
export interface FoolCommerceDtoTrackingUtmCode {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTrackingUtmCode
     */
    'source'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTrackingUtmCode
     */
    'medium'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTrackingUtmCode
     */
    'campaign'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTrackingUtmCode
     */
    'term'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTrackingUtmCode
     */
    'content'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoTrialOffer
 */
export interface FoolCommerceDtoTrialOffer {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoTrialOffer
     */
    'trialType'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoTimePeriod}
     * @memberof FoolCommerceDtoTrialOffer
     */
    'trialPeriod'?: FoolCommerceDtoTimePeriod;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoTrialOffer
     */
    'trialConversionPrice'?: FoolCommerceDtoMoney;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoTrialOfferForm
 */
export interface FoolCommerceDtoTrialOfferForm {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoTrialOfferForm
     */
    'trialTimePeriodId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoTrialOfferForm
     */
    'trialConversionPrice'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoUidValueDiscountForm
 */
export interface FoolCommerceDtoUidValueDiscountForm {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUidValueDiscountForm
     */
    'uid': number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUidValueDiscountForm
     */
    'value': number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoUnlockUserPurchasesForm
 */
export interface FoolCommerceDtoUnlockUserPurchasesForm {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUnlockUserPurchasesForm
     */
    'unlockedByAdminUid': number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUnlockUserPurchasesForm
     */
    'unlockedComment'?: string | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoUpdateOfferForm
 */
export interface FoolCommerceDtoUpdateOfferForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdateOfferForm
     */
    'offerMarkup'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdateOfferForm
     */
    'fulfillmentUrl'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUpdateOfferForm
     */
    'acquisitionPrice'?: number | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUpdateOfferForm
     */
    'modifiedByUid'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoUpdatePromotionForm
 */
export interface FoolCommerceDtoUpdatePromotionForm {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUpdatePromotionForm
     */
    'modifiedByUid'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUpdatePromotionForm
     */
    'teasedPremiumProductId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdatePromotionForm
     */
    'countryCode'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdatePromotionForm
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdatePromotionForm
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdatePromotionForm
     */
    'endDate'?: string | null;
    /**
     *
     * @type {FoolCommerceDtoRedirectSettings}
     * @memberof FoolCommerceDtoUpdatePromotionForm
     */
    'redirectSettings'?: FoolCommerceDtoRedirectSettings;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUpdatePromotionForm
     */
    'campaignId'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdatePromotionForm
     */
    'audienceType'?: FoolCommerceDtoUpdatePromotionFormAudienceTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FoolCommerceDtoUpdatePromotionFormAudienceTypeEnum {
    NewMember = 'NewMember',
    Retention = 'Retention',
    Acquisition = 'Acquisition'
}

/**
 *
 * @export
 * @interface FoolCommerceDtoUpdateSingleItemProductForm
 */
export interface FoolCommerceDtoUpdateSingleItemProductForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdateSingleItemProductForm
     */
    'discontinuationDate'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUpdateSingleItemProductForm
     */
    'modifiedByUid'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoUpdateSingleItemProductForm
     */
    'availableForSale'?: boolean;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUpdateSingleItemProductForm
     */
    'basePrice'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUpdateSingleItemProductForm
     */
    'acquisitionPrice'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdateSingleItemProductForm
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdateSingleItemProductForm
     */
    'url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdateSingleItemProductForm
     */
    'primaryTickers'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdateSingleItemProductForm
     */
    'description'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUpdateSingleItemProductForm
     */
    'defaultMoneyBackGuaranteeTimePeriodId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUpdateSingleItemProductForm
     */
    'orderConfirmationProgramId'?: number | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoUpdateSubscriptionProductForm
 */
export interface FoolCommerceDtoUpdateSubscriptionProductForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdateSubscriptionProductForm
     */
    'discontinuationDate'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUpdateSubscriptionProductForm
     */
    'modifiedByUid'?: number;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoUpdateSubscriptionProductForm
     */
    'isBackEnd'?: boolean;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdateSubscriptionProductForm
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdateSubscriptionProductForm
     */
    'url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdateSubscriptionProductForm
     */
    'primaryTickers'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdateSubscriptionProductForm
     */
    'description'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUpdateSubscriptionProductForm
     */
    'defaultMoneyBackGuaranteeTimePeriodId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUpdateSubscriptionProductForm
     */
    'orderConfirmationProgramId'?: number | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoUpdateSubscriptionProductLevelForm
 */
export interface FoolCommerceDtoUpdateSubscriptionProductLevelForm {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUpdateSubscriptionProductLevelForm
     */
    'productLevel'?: FoolCommerceDtoUpdateSubscriptionProductLevelFormProductLevelEnum;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUpdateSubscriptionProductLevelForm
     */
    'modifiedByUid'?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum FoolCommerceDtoUpdateSubscriptionProductLevelFormProductLevelEnum {
    LevelOne = 'LevelOne',
    LevelTwo = 'LevelTwo',
    LevelThree = 'LevelThree',
    LevelFour = 'LevelFour',
    LevelFive = 'LevelFive'
}

/**
 *
 * @export
 * @interface FoolCommerceDtoUserDiscount
 */
export interface FoolCommerceDtoUserDiscount {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUserDiscount
     */
    'uid'?: number;
    /**
     *
     * @type {FoolCommerceDtoMoney}
     * @memberof FoolCommerceDtoUserDiscount
     */
    'value'?: FoolCommerceDtoMoney;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUserDiscount
     */
    'discountName'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUserDiscount
     */
    'discountId'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUserDiscount
     */
    'expirationDate'?: string;
    /**
     *
     * @type {Array<FoolCommerceDtoProduct>}
     * @memberof FoolCommerceDtoUserDiscount
     */
    'products'?: Array<FoolCommerceDtoProduct> | null;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoUserPurchaseLockout
 */
export interface FoolCommerceDtoUserPurchaseLockout {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUserPurchaseLockout
     */
    'customerUid'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUserPurchaseLockout
     */
    'lockoutEndDate'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUserPurchaseLockout
     */
    'lockedDate'?: string;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUserPurchaseLockout
     */
    'lockedByAdminUid'?: number;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUserPurchaseLockout
     */
    'lockedByAdminName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUserPurchaseLockout
     */
    'lockedComment'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUserPurchaseLockout
     */
    'unlockedDate'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUserPurchaseLockout
     */
    'unlockedByAdminUid'?: number | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUserPurchaseLockout
     */
    'unlockedByAdminName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceDtoUserPurchaseLockout
     */
    'unlockedComment'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof FoolCommerceDtoUserPurchaseLockout
     */
    'isCurrentPurchaseLock'?: boolean;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoUserReport
 */
export interface FoolCommerceDtoUserReport {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoUserReport
     */
    'id'?: number;
    /**
     *
     * @type {FoolCommerceDtoProduct}
     * @memberof FoolCommerceDtoUserReport
     */
    'product'?: FoolCommerceDtoProduct;
    /**
     *
     * @type {FoolCommerceDtoOrder}
     * @memberof FoolCommerceDtoUserReport
     */
    'order'?: FoolCommerceDtoOrder;
}
/**
 *
 * @export
 * @interface FoolCommerceDtoV2SubscriptionForTest
 */
export interface FoolCommerceDtoV2SubscriptionForTest {
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoV2SubscriptionForTest
     */
    'subscriptionId'?: number;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceDtoV2SubscriptionForTest
     */
    'userId'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceExceptionsInvalidSubscriptionActionRequestException
 */
export interface FoolCommerceExceptionsInvalidSubscriptionActionRequestException {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsInvalidSubscriptionActionRequestException
     */
    'stackTrace'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsInvalidSubscriptionActionRequestException
     */
    'message'?: string | null;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof FoolCommerceExceptionsInvalidSubscriptionActionRequestException
     */
    'data'?: { [key: string]: any; } | null;
    /**
     *
     * @type {any}
     * @memberof FoolCommerceExceptionsInvalidSubscriptionActionRequestException
     */
    'innerException'?: any | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsInvalidSubscriptionActionRequestException
     */
    'helpLink'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsInvalidSubscriptionActionRequestException
     */
    'source'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceExceptionsInvalidSubscriptionActionRequestException
     */
    'hResult'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceExceptionsInvalidSubscriptionProductOperationException
 */
export interface FoolCommerceExceptionsInvalidSubscriptionProductOperationException {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsInvalidSubscriptionProductOperationException
     */
    'stackTrace'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsInvalidSubscriptionProductOperationException
     */
    'message'?: string | null;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof FoolCommerceExceptionsInvalidSubscriptionProductOperationException
     */
    'data'?: { [key: string]: any; } | null;
    /**
     *
     * @type {any}
     * @memberof FoolCommerceExceptionsInvalidSubscriptionProductOperationException
     */
    'innerException'?: any | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsInvalidSubscriptionProductOperationException
     */
    'helpLink'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsInvalidSubscriptionProductOperationException
     */
    'source'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceExceptionsInvalidSubscriptionProductOperationException
     */
    'hResult'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceExceptionsProductNotFoundException
 */
export interface FoolCommerceExceptionsProductNotFoundException {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsProductNotFoundException
     */
    'stackTrace'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsProductNotFoundException
     */
    'message'?: string | null;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof FoolCommerceExceptionsProductNotFoundException
     */
    'data'?: { [key: string]: any; } | null;
    /**
     *
     * @type {any}
     * @memberof FoolCommerceExceptionsProductNotFoundException
     */
    'innerException'?: any | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsProductNotFoundException
     */
    'helpLink'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsProductNotFoundException
     */
    'source'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceExceptionsProductNotFoundException
     */
    'hResult'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceExceptionsSubscriptionNotFoundException
 */
export interface FoolCommerceExceptionsSubscriptionNotFoundException {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsSubscriptionNotFoundException
     */
    'stackTrace'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsSubscriptionNotFoundException
     */
    'message'?: string | null;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof FoolCommerceExceptionsSubscriptionNotFoundException
     */
    'data'?: { [key: string]: any; } | null;
    /**
     *
     * @type {any}
     * @memberof FoolCommerceExceptionsSubscriptionNotFoundException
     */
    'innerException'?: any | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsSubscriptionNotFoundException
     */
    'helpLink'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExceptionsSubscriptionNotFoundException
     */
    'source'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceExceptionsSubscriptionNotFoundException
     */
    'hResult'?: number;
}
/**
 *
 * @export
 * @interface FoolCommerceExternalRegistrationUserNotFoundException
 */
export interface FoolCommerceExternalRegistrationUserNotFoundException {
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExternalRegistrationUserNotFoundException
     */
    'stackTrace'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExternalRegistrationUserNotFoundException
     */
    'message'?: string | null;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof FoolCommerceExternalRegistrationUserNotFoundException
     */
    'data'?: { [key: string]: any; } | null;
    /**
     *
     * @type {any}
     * @memberof FoolCommerceExternalRegistrationUserNotFoundException
     */
    'innerException'?: any | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExternalRegistrationUserNotFoundException
     */
    'helpLink'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FoolCommerceExternalRegistrationUserNotFoundException
     */
    'source'?: string | null;
    /**
     *
     * @type {number}
     * @memberof FoolCommerceExternalRegistrationUserNotFoundException
     */
    'hResult'?: number;
}
/**
 *
 * @export
 * @interface MicrosoftAspNetCoreMvcProblemDetails
 */
export interface MicrosoftAspNetCoreMvcProblemDetails {
    [key: string]: any | any;

    /**
     *
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'title'?: string | null;
    /**
     *
     * @type {number}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'status'?: number | null;
    /**
     *
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'detail'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'instance'?: string | null;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Set default billing address by UID
         * @param {number} uid
         * @param {FoolCommerceDtoPostalAddressForm} [foolCommerceDtoPostalAddressForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateBillingAddress: async (uid: number, foolCommerceDtoPostalAddressForm?: FoolCommerceDtoPostalAddressForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('addOrUpdateBillingAddress', 'uid', uid)
            const localVarPath = `/v1/accounts/{uid}/billing-address`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoPostalAddressForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set default phone number by UID
         * @param {number} uid
         * @param {string} [phoneNumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateBillingPhoneNumber: async (uid: number, phoneNumber?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('addOrUpdateBillingPhoneNumber', 'uid', uid)
            const localVarPath = `/v1/accounts/{uid}/billing-phone-number`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phoneNumber'] = phoneNumber;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get account by its UID
         * @param {number} uid
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (uid: number, countryCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getAccount', 'uid', uid)
            const localVarPath = `/v1/accounts/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns details of SourceCode / IP Address / NumberOfOrders highlighted as potential fraud risk for this specific user within the specified date range.  Note: Potential fraud risk is defined as attempting orders with at least 3 different payment methods within a specified number of hours.
         * @param {number} uid
         * @param {string} startDate Data type is DATE, not DATETIME.
         * @param {string} endDate Data type is DATE, not DATETIME.
         * @param {number} [minPaymentMethods] Must be &gt;&#x3D; 3.
         * @param {number} [subsequentPaymentMinutes] Must be less than 1440 (one day).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountFraudRiskOrderDetails: async (uid: number, startDate: string, endDate: string, minPaymentMethods?: number, subsequentPaymentMinutes?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getAccountFraudRiskOrderDetails', 'uid', uid)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getAccountFraudRiskOrderDetails', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getAccountFraudRiskOrderDetails', 'endDate', endDate)
            const localVarPath = `/v1/accounts/{uid}/fraud-risk-details`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (minPaymentMethods !== undefined) {
                localVarQueryParameter['minPaymentMethods'] = minPaymentMethods;
            }

            if (subsequentPaymentMinutes !== undefined) {
                localVarQueryParameter['subsequentPaymentMinutes'] = subsequentPaymentMinutes;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserPurchaseLockout: async (uid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getCurrentUserPurchaseLockout', 'uid', uid)
            const localVarPath = `/v1/accounts/{uid}/purchase-lockout`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Product Entitlements By UID
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductEntitlementsForUser: async (uid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getProductEntitlementsForUser', 'uid', uid)
            const localVarPath = `/v1/accounts/product-entitlements/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get products owned by given UID
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsOwnedByUid: async (uid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getProductsOwnedByUid', 'uid', uid)
            const localVarPath = `/v1/accounts/product-owned-by-uid/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get account reports by its UID
         * @param {number} uid
         * @param {string} [countryCode]
         * @param {'Free' | 'Paid' | 'Any'} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReports: async (uid: number, countryCode?: string, type?: 'Free' | 'Paid' | 'Any', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getReports', 'uid', uid)
            const localVarPath = `/v1/accounts/{uid}/reports`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get account subscriptions by its UID
         * @param {number} uid
         * @param {string} [countryCode]
         * @param {'Active' | 'Expired' | 'Any'} [status]
         * @param {number} [productId]
         * @param {boolean} [allowDiscontinuedProducts]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptions: async (uid: number, countryCode?: string, status?: 'Active' | 'Expired' | 'Any', productId?: number, allowDiscontinuedProducts?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getSubscriptions', 'uid', uid)
            const localVarPath = `/v1/accounts/{uid}/subscriptions`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (allowDiscontinuedProducts !== undefined) {
                localVarQueryParameter['allowDiscontinuedProducts'] = allowDiscontinuedProducts;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns list of user\'s payment processor transactions either created by Commerce db or imported on the reconciliation report
         * @param {number} uid
         * @param {boolean} [existsInCommerceDb] null &#x3D; either/True &#x3D; exists in Commerce/False &#x3D; does not exist in Commerce db
         * @param {boolean} [existsInPaymentProvider] null &#x3D; either/True &#x3D; exists in audit import/False &#x3D; does not exist in audit import
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPaymentProcessorTransactionDetails: async (uid: number, existsInCommerceDb?: boolean, existsInPaymentProvider?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserPaymentProcessorTransactionDetails', 'uid', uid)
            const localVarPath = `/v1/accounts/{uid}/transaction-details`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (existsInCommerceDb !== undefined) {
                localVarQueryParameter['existsInCommerceDb'] = existsInCommerceDb;
            }

            if (existsInPaymentProvider !== undefined) {
                localVarQueryParameter['existsInPaymentProvider'] = existsInPaymentProvider;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} uid
         * @param {number} [subscriptionId]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSubscriptionBillingActivity: async (uid: number, subscriptionId?: number, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserSubscriptionBillingActivity', 'uid', uid)
            const localVarPath = `/v1/accounts/{uid}/billing-activity`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subscriptionId !== undefined) {
                localVarQueryParameter['subscriptionId'] = subscriptionId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} uid
         * @param {FoolCommerceDtoLockUserPurchasesForm} [foolCommerceDtoLockUserPurchasesForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lockUserPurchases: async (uid: number, foolCommerceDtoLockUserPurchasesForm?: FoolCommerceDtoLockUserPurchasesForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('lockUserPurchases', 'uid', uid)
            const localVarPath = `/v1/accounts/{uid}/purchase-lockout/lock`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoLockUserPurchasesForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} uid
         * @param {number} subscriptionId
         * @param {FoolCommerceDtoMemberActionsMemberSubscriptionActionForm} [foolCommerceDtoMemberActionsMemberSubscriptionActionForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestAccountSubscriptionAction: async (uid: number, subscriptionId: number, foolCommerceDtoMemberActionsMemberSubscriptionActionForm?: FoolCommerceDtoMemberActionsMemberSubscriptionActionForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('requestAccountSubscriptionAction', 'uid', uid)
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('requestAccountSubscriptionAction', 'subscriptionId', subscriptionId)
            const localVarPath = `/v1/accounts/{uid}/subscriptions/{subscriptionId}/action`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoMemberActionsMemberSubscriptionActionForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set specific payment method to user\'s default payment method
         * @param {number} uid The UID of the user,
         * @param {number} paymentMethodId The ID of the desired Payment Method to set as user\&#39;s default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultPaymentMethodForUser: async (uid: number, paymentMethodId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('setDefaultPaymentMethodForUser', 'uid', uid)
            // verify required parameter 'paymentMethodId' is not null or undefined
            assertParamExists('setDefaultPaymentMethodForUser', 'paymentMethodId', paymentMethodId)
            const localVarPath = `/v1/accounts/{uid}/payment-methods/{paymentMethodId}/make-default`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(paymentMethodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Should send Create Password email
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shouldSendCreatePasswordEmail: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('shouldSendCreatePasswordEmail', 'email', email)
            const localVarPath = `/v1/accounts/{email}/should-send-create-password-email`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} uid
         * @param {FoolCommerceDtoUnlockUserPurchasesForm} [foolCommerceDtoUnlockUserPurchasesForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlockUserPurchases: async (uid: number, foolCommerceDtoUnlockUserPurchasesForm?: FoolCommerceDtoUnlockUserPurchasesForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('unlockUserPurchases', 'uid', uid)
            const localVarPath = `/v1/accounts/{uid}/purchase-lockout/unlock`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoUnlockUserPurchasesForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Set default billing address by UID
         * @param {number} uid
         * @param {FoolCommerceDtoPostalAddressForm} [foolCommerceDtoPostalAddressForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrUpdateBillingAddress(uid: number, foolCommerceDtoPostalAddressForm?: FoolCommerceDtoPostalAddressForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoBillingAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrUpdateBillingAddress(uid, foolCommerceDtoPostalAddressForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Set default phone number by UID
         * @param {number} uid
         * @param {string} [phoneNumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrUpdateBillingPhoneNumber(uid: number, phoneNumber?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoBillingPhoneNumber>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrUpdateBillingPhoneNumber(uid, phoneNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get account by its UID
         * @param {number} uid
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(uid: number, countryCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(uid, countryCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Returns details of SourceCode / IP Address / NumberOfOrders highlighted as potential fraud risk for this specific user within the specified date range.  Note: Potential fraud risk is defined as attempting orders with at least 3 different payment methods within a specified number of hours.
         * @param {number} uid
         * @param {string} startDate Data type is DATE, not DATETIME.
         * @param {string} endDate Data type is DATE, not DATETIME.
         * @param {number} [minPaymentMethods] Must be &gt;&#x3D; 3.
         * @param {number} [subsequentPaymentMinutes] Must be less than 1440 (one day).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountFraudRiskOrderDetails(uid: number, startDate: string, endDate: string, minPaymentMethods?: number, subsequentPaymentMinutes?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoFraudRiskOrderDetail>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountFraudRiskOrderDetails(uid, startDate, endDate, minPaymentMethods, subsequentPaymentMinutes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserPurchaseLockout(uid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoUserPurchaseLockout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserPurchaseLockout(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Product Entitlements By UID
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductEntitlementsForUser(uid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductEntitlementsForUser(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get products owned by given UID
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsOwnedByUid(uid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoProductsOwnedByUid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductsOwnedByUid(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get account reports by its UID
         * @param {number} uid
         * @param {string} [countryCode]
         * @param {'Free' | 'Paid' | 'Any'} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReports(uid: number, countryCode?: string, type?: 'Free' | 'Paid' | 'Any', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoUserReport>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReports(uid, countryCode, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get account subscriptions by its UID
         * @param {number} uid
         * @param {string} [countryCode]
         * @param {'Active' | 'Expired' | 'Any'} [status]
         * @param {number} [productId]
         * @param {boolean} [allowDiscontinuedProducts]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptions(uid: number, countryCode?: string, status?: 'Active' | 'Expired' | 'Any', productId?: number, allowDiscontinuedProducts?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoSubscription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptions(uid, countryCode, status, productId, allowDiscontinuedProducts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Returns list of user\'s payment processor transactions either created by Commerce db or imported on the reconciliation report
         * @param {number} uid
         * @param {boolean} [existsInCommerceDb] null &#x3D; either/True &#x3D; exists in Commerce/False &#x3D; does not exist in Commerce db
         * @param {boolean} [existsInPaymentProvider] null &#x3D; either/True &#x3D; exists in audit import/False &#x3D; does not exist in audit import
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPaymentProcessorTransactionDetails(uid: number, existsInCommerceDb?: boolean, existsInPaymentProvider?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoFraudRiskOrderDetail>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPaymentProcessorTransactionDetails(uid, existsInCommerceDb, existsInPaymentProvider, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} uid
         * @param {number} [subscriptionId]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSubscriptionBillingActivity(uid: number, subscriptionId?: number, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoBillingActivityDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserSubscriptionBillingActivity(uid, subscriptionId, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} uid
         * @param {FoolCommerceDtoLockUserPurchasesForm} [foolCommerceDtoLockUserPurchasesForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lockUserPurchases(uid: number, foolCommerceDtoLockUserPurchasesForm?: FoolCommerceDtoLockUserPurchasesForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoUserPurchaseLockout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lockUserPurchases(uid, foolCommerceDtoLockUserPurchasesForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} uid
         * @param {number} subscriptionId
         * @param {FoolCommerceDtoMemberActionsMemberSubscriptionActionForm} [foolCommerceDtoMemberActionsMemberSubscriptionActionForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestAccountSubscriptionAction(uid: number, subscriptionId: number, foolCommerceDtoMemberActionsMemberSubscriptionActionForm?: FoolCommerceDtoMemberActionsMemberSubscriptionActionForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoMemberActionsMemberSubscriptionActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestAccountSubscriptionAction(uid, subscriptionId, foolCommerceDtoMemberActionsMemberSubscriptionActionForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Set specific payment method to user\'s default payment method
         * @param {number} uid The UID of the user,
         * @param {number} paymentMethodId The ID of the desired Payment Method to set as user\&#39;s default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDefaultPaymentMethodForUser(uid: number, paymentMethodId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoPaymentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDefaultPaymentMethodForUser(uid, paymentMethodId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Should send Create Password email
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shouldSendCreatePasswordEmail(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoMmsCreatePasswordEmailSendHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shouldSendCreatePasswordEmail(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} uid
         * @param {FoolCommerceDtoUnlockUserPurchasesForm} [foolCommerceDtoUnlockUserPurchasesForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlockUserPurchases(uid: number, foolCommerceDtoUnlockUserPurchasesForm?: FoolCommerceDtoUnlockUserPurchasesForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoUserPurchaseLockout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlockUserPurchases(uid, foolCommerceDtoUnlockUserPurchasesForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         *
         * @summary Set default billing address by UID
         * @param {number} uid
         * @param {FoolCommerceDtoPostalAddressForm} [foolCommerceDtoPostalAddressForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateBillingAddress(uid: number, foolCommerceDtoPostalAddressForm?: FoolCommerceDtoPostalAddressForm, options?: any): AxiosPromise<FoolCommerceDtoBillingAddress> {
            return localVarFp.addOrUpdateBillingAddress(uid, foolCommerceDtoPostalAddressForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set default phone number by UID
         * @param {number} uid
         * @param {string} [phoneNumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateBillingPhoneNumber(uid: number, phoneNumber?: string, options?: any): AxiosPromise<FoolCommerceDtoBillingPhoneNumber> {
            return localVarFp.addOrUpdateBillingPhoneNumber(uid, phoneNumber, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get account by its UID
         * @param {number} uid
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(uid: number, countryCode?: string, options?: any): AxiosPromise<FoolCommerceDtoAccount> {
            return localVarFp.getAccount(uid, countryCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns details of SourceCode / IP Address / NumberOfOrders highlighted as potential fraud risk for this specific user within the specified date range.  Note: Potential fraud risk is defined as attempting orders with at least 3 different payment methods within a specified number of hours.
         * @param {number} uid
         * @param {string} startDate Data type is DATE, not DATETIME.
         * @param {string} endDate Data type is DATE, not DATETIME.
         * @param {number} [minPaymentMethods] Must be &gt;&#x3D; 3.
         * @param {number} [subsequentPaymentMinutes] Must be less than 1440 (one day).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountFraudRiskOrderDetails(uid: number, startDate: string, endDate: string, minPaymentMethods?: number, subsequentPaymentMinutes?: number, options?: any): AxiosPromise<Array<FoolCommerceDtoFraudRiskOrderDetail>> {
            return localVarFp.getAccountFraudRiskOrderDetails(uid, startDate, endDate, minPaymentMethods, subsequentPaymentMinutes, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserPurchaseLockout(uid: number, options?: any): AxiosPromise<FoolCommerceDtoUserPurchaseLockout> {
            return localVarFp.getCurrentUserPurchaseLockout(uid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Product Entitlements By UID
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductEntitlementsForUser(uid: number, options?: any): AxiosPromise<Array<number>> {
            return localVarFp.getProductEntitlementsForUser(uid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get products owned by given UID
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsOwnedByUid(uid: number, options?: any): AxiosPromise<FoolCommerceDtoProductsOwnedByUid> {
            return localVarFp.getProductsOwnedByUid(uid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get account reports by its UID
         * @param {number} uid
         * @param {string} [countryCode]
         * @param {'Free' | 'Paid' | 'Any'} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReports(uid: number, countryCode?: string, type?: 'Free' | 'Paid' | 'Any', options?: any): AxiosPromise<Array<FoolCommerceDtoUserReport>> {
            return localVarFp.getReports(uid, countryCode, type, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get account subscriptions by its UID
         * @param {number} uid
         * @param {string} [countryCode]
         * @param {'Active' | 'Expired' | 'Any'} [status]
         * @param {number} [productId]
         * @param {boolean} [allowDiscontinuedProducts]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptions(uid: number, countryCode?: string, status?: 'Active' | 'Expired' | 'Any', productId?: number, allowDiscontinuedProducts?: boolean, options?: any): AxiosPromise<Array<FoolCommerceDtoSubscription>> {
            return localVarFp.getSubscriptions(uid, countryCode, status, productId, allowDiscontinuedProducts, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns list of user\'s payment processor transactions either created by Commerce db or imported on the reconciliation report
         * @param {number} uid
         * @param {boolean} [existsInCommerceDb] null &#x3D; either/True &#x3D; exists in Commerce/False &#x3D; does not exist in Commerce db
         * @param {boolean} [existsInPaymentProvider] null &#x3D; either/True &#x3D; exists in audit import/False &#x3D; does not exist in audit import
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPaymentProcessorTransactionDetails(uid: number, existsInCommerceDb?: boolean, existsInPaymentProvider?: boolean, options?: any): AxiosPromise<Array<FoolCommerceDtoFraudRiskOrderDetail>> {
            return localVarFp.getUserPaymentProcessorTransactionDetails(uid, existsInCommerceDb, existsInPaymentProvider, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} uid
         * @param {number} [subscriptionId]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSubscriptionBillingActivity(uid: number, subscriptionId?: number, page?: number, pageSize?: number, options?: any): AxiosPromise<Array<FoolCommerceDtoBillingActivityDTO>> {
            return localVarFp.getUserSubscriptionBillingActivity(uid, subscriptionId, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} uid
         * @param {FoolCommerceDtoLockUserPurchasesForm} [foolCommerceDtoLockUserPurchasesForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lockUserPurchases(uid: number, foolCommerceDtoLockUserPurchasesForm?: FoolCommerceDtoLockUserPurchasesForm, options?: any): AxiosPromise<FoolCommerceDtoUserPurchaseLockout> {
            return localVarFp.lockUserPurchases(uid, foolCommerceDtoLockUserPurchasesForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} uid
         * @param {number} subscriptionId
         * @param {FoolCommerceDtoMemberActionsMemberSubscriptionActionForm} [foolCommerceDtoMemberActionsMemberSubscriptionActionForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestAccountSubscriptionAction(uid: number, subscriptionId: number, foolCommerceDtoMemberActionsMemberSubscriptionActionForm?: FoolCommerceDtoMemberActionsMemberSubscriptionActionForm, options?: any): AxiosPromise<FoolCommerceDtoMemberActionsMemberSubscriptionActionResponse> {
            return localVarFp.requestAccountSubscriptionAction(uid, subscriptionId, foolCommerceDtoMemberActionsMemberSubscriptionActionForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set specific payment method to user\'s default payment method
         * @param {number} uid The UID of the user,
         * @param {number} paymentMethodId The ID of the desired Payment Method to set as user\&#39;s default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultPaymentMethodForUser(uid: number, paymentMethodId: number, options?: any): AxiosPromise<FoolCommerceDtoPaymentMethod> {
            return localVarFp.setDefaultPaymentMethodForUser(uid, paymentMethodId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Should send Create Password email
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shouldSendCreatePasswordEmail(email: string, options?: any): AxiosPromise<FoolCommerceDtoMmsCreatePasswordEmailSendHistory> {
            return localVarFp.shouldSendCreatePasswordEmail(email, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} uid
         * @param {FoolCommerceDtoUnlockUserPurchasesForm} [foolCommerceDtoUnlockUserPurchasesForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlockUserPurchases(uid: number, foolCommerceDtoUnlockUserPurchasesForm?: FoolCommerceDtoUnlockUserPurchasesForm, options?: any): AxiosPromise<FoolCommerceDtoUserPurchaseLockout> {
            return localVarFp.unlockUserPurchases(uid, foolCommerceDtoUnlockUserPurchasesForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     *
     * @summary Set default billing address by UID
     * @param {number} uid
     * @param {FoolCommerceDtoPostalAddressForm} [foolCommerceDtoPostalAddressForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public addOrUpdateBillingAddress(uid: number, foolCommerceDtoPostalAddressForm?: FoolCommerceDtoPostalAddressForm, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).addOrUpdateBillingAddress(uid, foolCommerceDtoPostalAddressForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Set default phone number by UID
     * @param {number} uid
     * @param {string} [phoneNumber]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public addOrUpdateBillingPhoneNumber(uid: number, phoneNumber?: string, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).addOrUpdateBillingPhoneNumber(uid, phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get account by its UID
     * @param {number} uid
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getAccount(uid: number, countryCode?: string, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getAccount(uid, countryCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Returns details of SourceCode / IP Address / NumberOfOrders highlighted as potential fraud risk for this specific user within the specified date range.  Note: Potential fraud risk is defined as attempting orders with at least 3 different payment methods within a specified number of hours.
     * @param {number} uid
     * @param {string} startDate Data type is DATE, not DATETIME.
     * @param {string} endDate Data type is DATE, not DATETIME.
     * @param {number} [minPaymentMethods] Must be &gt;&#x3D; 3.
     * @param {number} [subsequentPaymentMinutes] Must be less than 1440 (one day).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getAccountFraudRiskOrderDetails(uid: number, startDate: string, endDate: string, minPaymentMethods?: number, subsequentPaymentMinutes?: number, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getAccountFraudRiskOrderDetails(uid, startDate, endDate, minPaymentMethods, subsequentPaymentMinutes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getCurrentUserPurchaseLockout(uid: number, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getCurrentUserPurchaseLockout(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Product Entitlements By UID
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getProductEntitlementsForUser(uid: number, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getProductEntitlementsForUser(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get products owned by given UID
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getProductsOwnedByUid(uid: number, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getProductsOwnedByUid(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get account reports by its UID
     * @param {number} uid
     * @param {string} [countryCode]
     * @param {'Free' | 'Paid' | 'Any'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getReports(uid: number, countryCode?: string, type?: 'Free' | 'Paid' | 'Any', options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getReports(uid, countryCode, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get account subscriptions by its UID
     * @param {number} uid
     * @param {string} [countryCode]
     * @param {'Active' | 'Expired' | 'Any'} [status]
     * @param {number} [productId]
     * @param {boolean} [allowDiscontinuedProducts]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getSubscriptions(uid: number, countryCode?: string, status?: 'Active' | 'Expired' | 'Any', productId?: number, allowDiscontinuedProducts?: boolean, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getSubscriptions(uid, countryCode, status, productId, allowDiscontinuedProducts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Returns list of user\'s payment processor transactions either created by Commerce db or imported on the reconciliation report
     * @param {number} uid
     * @param {boolean} [existsInCommerceDb] null &#x3D; either/True &#x3D; exists in Commerce/False &#x3D; does not exist in Commerce db
     * @param {boolean} [existsInPaymentProvider] null &#x3D; either/True &#x3D; exists in audit import/False &#x3D; does not exist in audit import
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getUserPaymentProcessorTransactionDetails(uid: number, existsInCommerceDb?: boolean, existsInPaymentProvider?: boolean, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getUserPaymentProcessorTransactionDetails(uid, existsInCommerceDb, existsInPaymentProvider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} uid
     * @param {number} [subscriptionId]
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getUserSubscriptionBillingActivity(uid: number, subscriptionId?: number, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getUserSubscriptionBillingActivity(uid, subscriptionId, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} uid
     * @param {FoolCommerceDtoLockUserPurchasesForm} [foolCommerceDtoLockUserPurchasesForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public lockUserPurchases(uid: number, foolCommerceDtoLockUserPurchasesForm?: FoolCommerceDtoLockUserPurchasesForm, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).lockUserPurchases(uid, foolCommerceDtoLockUserPurchasesForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} uid
     * @param {number} subscriptionId
     * @param {FoolCommerceDtoMemberActionsMemberSubscriptionActionForm} [foolCommerceDtoMemberActionsMemberSubscriptionActionForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public requestAccountSubscriptionAction(uid: number, subscriptionId: number, foolCommerceDtoMemberActionsMemberSubscriptionActionForm?: FoolCommerceDtoMemberActionsMemberSubscriptionActionForm, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).requestAccountSubscriptionAction(uid, subscriptionId, foolCommerceDtoMemberActionsMemberSubscriptionActionForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Set specific payment method to user\'s default payment method
     * @param {number} uid The UID of the user,
     * @param {number} paymentMethodId The ID of the desired Payment Method to set as user\&#39;s default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public setDefaultPaymentMethodForUser(uid: number, paymentMethodId: number, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).setDefaultPaymentMethodForUser(uid, paymentMethodId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Should send Create Password email
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public shouldSendCreatePasswordEmail(email: string, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).shouldSendCreatePasswordEmail(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} uid
     * @param {FoolCommerceDtoUnlockUserPurchasesForm} [foolCommerceDtoUnlockUserPurchasesForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public unlockUserPurchases(uid: number, foolCommerceDtoUnlockUserPurchasesForm?: FoolCommerceDtoUnlockUserPurchasesForm, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).unlockUserPurchases(uid, foolCommerceDtoUnlockUserPurchasesForm, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ChangeLogApi - axios parameter creator
 * @export
 */
export const ChangeLogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get Product Item Change Logs
         * @param {number} productItemId
         * @param {number} [changeType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChangeLogsForProductItem: async (productItemId: number, changeType?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productItemId' is not null or undefined
            assertParamExists('getChangeLogsForProductItem', 'productItemId', productItemId)
            const localVarPath = `/v1/changelogs/product-item/{productItemId}`
                .replace(`{${"productItemId"}}`, encodeURIComponent(String(productItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (changeType !== undefined) {
                localVarQueryParameter['changeType'] = changeType;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Subscription Change Logs
         * @param {number} subscriptionId
         * @param {number} [changeType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChangeLogsForSubscription: async (subscriptionId: number, changeType?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('getChangeLogsForSubscription', 'subscriptionId', subscriptionId)
            const localVarPath = `/v1/changelogs/subscription/{subscriptionId}`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (changeType !== undefined) {
                localVarQueryParameter['changeType'] = changeType;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get UID Account Change Logs
         * @param {number} uid
         * @param {number} [changeType]
         * @param {boolean} [excludeSubscriptionLogs]
         * @param {boolean} [excludeProductLogs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChangeLogsForUid: async (uid: number, changeType?: number, excludeSubscriptionLogs?: boolean, excludeProductLogs?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getChangeLogsForUid', 'uid', uid)
            const localVarPath = `/v1/changelogs/account/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (changeType !== undefined) {
                localVarQueryParameter['changeType'] = changeType;
            }

            if (excludeSubscriptionLogs !== undefined) {
                localVarQueryParameter['excludeSubscriptionLogs'] = excludeSubscriptionLogs;
            }

            if (excludeProductLogs !== undefined) {
                localVarQueryParameter['excludeProductLogs'] = excludeProductLogs;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChangeLogApi - functional programming interface
 * @export
 */
export const ChangeLogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChangeLogApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Get Product Item Change Logs
         * @param {number} productItemId
         * @param {number} [changeType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChangeLogsForProductItem(productItemId: number, changeType?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoChangeLog>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChangeLogsForProductItem(productItemId, changeType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Subscription Change Logs
         * @param {number} subscriptionId
         * @param {number} [changeType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChangeLogsForSubscription(subscriptionId: number, changeType?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoChangeLog>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChangeLogsForSubscription(subscriptionId, changeType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get UID Account Change Logs
         * @param {number} uid
         * @param {number} [changeType]
         * @param {boolean} [excludeSubscriptionLogs]
         * @param {boolean} [excludeProductLogs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChangeLogsForUid(uid: number, changeType?: number, excludeSubscriptionLogs?: boolean, excludeProductLogs?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoChangeLog>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChangeLogsForUid(uid, changeType, excludeSubscriptionLogs, excludeProductLogs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChangeLogApi - factory interface
 * @export
 */
export const ChangeLogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChangeLogApiFp(configuration)
    return {
        /**
         *
         * @summary Get Product Item Change Logs
         * @param {number} productItemId
         * @param {number} [changeType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChangeLogsForProductItem(productItemId: number, changeType?: number, options?: any): AxiosPromise<Array<FoolCommerceDtoChangeLog>> {
            return localVarFp.getChangeLogsForProductItem(productItemId, changeType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Subscription Change Logs
         * @param {number} subscriptionId
         * @param {number} [changeType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChangeLogsForSubscription(subscriptionId: number, changeType?: number, options?: any): AxiosPromise<Array<FoolCommerceDtoChangeLog>> {
            return localVarFp.getChangeLogsForSubscription(subscriptionId, changeType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get UID Account Change Logs
         * @param {number} uid
         * @param {number} [changeType]
         * @param {boolean} [excludeSubscriptionLogs]
         * @param {boolean} [excludeProductLogs]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChangeLogsForUid(uid: number, changeType?: number, excludeSubscriptionLogs?: boolean, excludeProductLogs?: boolean, options?: any): AxiosPromise<Array<FoolCommerceDtoChangeLog>> {
            return localVarFp.getChangeLogsForUid(uid, changeType, excludeSubscriptionLogs, excludeProductLogs, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChangeLogApi - object-oriented interface
 * @export
 * @class ChangeLogApi
 * @extends {BaseAPI}
 */
export class ChangeLogApi extends BaseAPI {
    /**
     *
     * @summary Get Product Item Change Logs
     * @param {number} productItemId
     * @param {number} [changeType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeLogApi
     */
    public getChangeLogsForProductItem(productItemId: number, changeType?: number, options?: AxiosRequestConfig) {
        return ChangeLogApiFp(this.configuration).getChangeLogsForProductItem(productItemId, changeType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Subscription Change Logs
     * @param {number} subscriptionId
     * @param {number} [changeType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeLogApi
     */
    public getChangeLogsForSubscription(subscriptionId: number, changeType?: number, options?: AxiosRequestConfig) {
        return ChangeLogApiFp(this.configuration).getChangeLogsForSubscription(subscriptionId, changeType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get UID Account Change Logs
     * @param {number} uid
     * @param {number} [changeType]
     * @param {boolean} [excludeSubscriptionLogs]
     * @param {boolean} [excludeProductLogs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeLogApi
     */
    public getChangeLogsForUid(uid: number, changeType?: number, excludeSubscriptionLogs?: boolean, excludeProductLogs?: boolean, options?: AxiosRequestConfig) {
        return ChangeLogApiFp(this.configuration).getChangeLogsForUid(uid, changeType, excludeSubscriptionLogs, excludeProductLogs, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CreditApi - axios parameter creator
 * @export
 */
export const CreditApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Execute Credit Transfer (formerly Credit Transfer Order)
         * @param {FoolCommerceDtoCreditServiceExecuteCreditTransferRequest} [foolCommerceDtoCreditServiceExecuteCreditTransferRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeCreditTransfer: async (foolCommerceDtoCreditServiceExecuteCreditTransferRequest?: FoolCommerceDtoCreditServiceExecuteCreditTransferRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/credits/credit-transfer-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoCreditServiceExecuteCreditTransferRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Credit Transfer Quote (formerly \'Subscription Transfer State\')
         * @param {FoolCommerceDtoCreditServiceCreditTransferQuoteRequest} [foolCommerceDtoCreditServiceCreditTransferQuoteRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreditTransferQuote: async (foolCommerceDtoCreditServiceCreditTransferQuoteRequest?: FoolCommerceDtoCreditServiceCreditTransferQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/credits/subscription-transfer-state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoCreditServiceCreditTransferQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Is User Eligibile For One Time Pro-Rated Refund
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUserEligibleForOneTimeProRatedRefund: async (uid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('isUserEligibleForOneTimeProRatedRefund', 'uid', uid)
            const localVarPath = `/v1/credits/is-user-eligible-for-one-time-pro-rated-refund/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Rollback a Subscription that was transferred using Credit Tool
         * @param {FoolCommerceDtoSubscriptionCreditTransferRollbackForm} [foolCommerceDtoSubscriptionCreditTransferRollbackForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackSubscriptionCreditTransfer: async (foolCommerceDtoSubscriptionCreditTransferRollbackForm?: FoolCommerceDtoSubscriptionCreditTransferRollbackForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/credits/rollback-subscription-transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoSubscriptionCreditTransferRollbackForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Subscription Purchase Amount
         * @param {string} promotion
         * @param {number} offerId
         * @param {number} amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionPurchaseAmount: async (promotion: string, offerId: number, amount: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotion' is not null or undefined
            assertParamExists('subscriptionPurchaseAmount', 'promotion', promotion)
            // verify required parameter 'offerId' is not null or undefined
            assertParamExists('subscriptionPurchaseAmount', 'offerId', offerId)
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subscriptionPurchaseAmount', 'amount', amount)
            const localVarPath = `/v1/credits/subscription-purchase-amount/{promotion}/{offerId}/{amount}`
                .replace(`{${"promotion"}}`, encodeURIComponent(String(promotion)))
                .replace(`{${"offerId"}}`, encodeURIComponent(String(offerId)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Subscription Purchase Amounts
         * @param {string} promotion
         * @param {number} amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionPurchaseAmounts: async (promotion: string, amount: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotion' is not null or undefined
            assertParamExists('subscriptionPurchaseAmounts', 'promotion', promotion)
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('subscriptionPurchaseAmounts', 'amount', amount)
            const localVarPath = `/v1/credits/subscription-purchase-amount/{promotion}/{amount}`
                .replace(`{${"promotion"}}`, encodeURIComponent(String(promotion)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Subscription Trade-In Amounts
         * @param {string} promotion
         * @param {number} subscriptionId
         * @param {boolean} [useFullValue]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionTradeInAmounts: async (promotion: string, subscriptionId: number, useFullValue?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotion' is not null or undefined
            assertParamExists('subscriptionTradeInAmounts', 'promotion', promotion)
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('subscriptionTradeInAmounts', 'subscriptionId', subscriptionId)
            const localVarPath = `/v1/credits/subscription-trade-in-amount/{promotion}/{subscriptionId}`
                .replace(`{${"promotion"}}`, encodeURIComponent(String(promotion)))
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (useFullValue !== undefined) {
                localVarQueryParameter['useFullValue'] = useFullValue;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Subscription Transfer Value
         * @param {number} subscriptionId
         * @param {boolean} [showFullValue]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionTransferValue: async (subscriptionId: number, showFullValue?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('subscriptionTransferValue', 'subscriptionId', subscriptionId)
            const localVarPath = `/v1/credits/subscription-transfer-value/{subscriptionId}`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (showFullValue !== undefined) {
                localVarQueryParameter['showFullValue'] = showFullValue;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Pro Rated Refund Eligibility Status
         * @param {FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest} [foolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProRatedEligibilityStatus: async (foolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest?: FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/credits/update-pro-rated-refund-eligibility-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreditApi - functional programming interface
 * @export
 */
export const CreditApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreditApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Execute Credit Transfer (formerly Credit Transfer Order)
         * @param {FoolCommerceDtoCreditServiceExecuteCreditTransferRequest} [foolCommerceDtoCreditServiceExecuteCreditTransferRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeCreditTransfer(foolCommerceDtoCreditServiceExecuteCreditTransferRequest?: FoolCommerceDtoCreditServiceExecuteCreditTransferRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoCreditServiceExecuteTransferOrderResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeCreditTransfer(foolCommerceDtoCreditServiceExecuteCreditTransferRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Credit Transfer Quote (formerly \'Subscription Transfer State\')
         * @param {FoolCommerceDtoCreditServiceCreditTransferQuoteRequest} [foolCommerceDtoCreditServiceCreditTransferQuoteRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCreditTransferQuote(foolCommerceDtoCreditServiceCreditTransferQuoteRequest?: FoolCommerceDtoCreditServiceCreditTransferQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoCreditServiceCreditTransferQuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCreditTransferQuote(foolCommerceDtoCreditServiceCreditTransferQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Is User Eligibile For One Time Pro-Rated Refund
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isUserEligibleForOneTimeProRatedRefund(uid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoProRatedRefundEligible>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isUserEligibleForOneTimeProRatedRefund(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Rollback a Subscription that was transferred using Credit Tool
         * @param {FoolCommerceDtoSubscriptionCreditTransferRollbackForm} [foolCommerceDtoSubscriptionCreditTransferRollbackForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rollbackSubscriptionCreditTransfer(foolCommerceDtoSubscriptionCreditTransferRollbackForm?: FoolCommerceDtoSubscriptionCreditTransferRollbackForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSubscriptionCreditTransferRollbackResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rollbackSubscriptionCreditTransfer(foolCommerceDtoSubscriptionCreditTransferRollbackForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Subscription Purchase Amount
         * @param {string} promotion
         * @param {number} offerId
         * @param {number} amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionPurchaseAmount(promotion: string, offerId: number, amount: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionPurchaseAmount(promotion, offerId, amount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Subscription Purchase Amounts
         * @param {string} promotion
         * @param {number} amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionPurchaseAmounts(promotion: string, amount: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoCreditServiceSubscriptionTransferToResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionPurchaseAmounts(promotion, amount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Subscription Trade-In Amounts
         * @param {string} promotion
         * @param {number} subscriptionId
         * @param {boolean} [useFullValue]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionTradeInAmounts(promotion: string, subscriptionId: number, useFullValue?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoCreditServiceSubscriptionTransferToResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionTradeInAmounts(promotion, subscriptionId, useFullValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Subscription Transfer Value
         * @param {number} subscriptionId
         * @param {boolean} [showFullValue]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionTransferValue(subscriptionId: number, showFullValue?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoMoney>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionTransferValue(subscriptionId, showFullValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update Pro Rated Refund Eligibility Status
         * @param {FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest} [foolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProRatedEligibilityStatus(foolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest?: FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProRatedEligibilityStatus(foolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreditApi - factory interface
 * @export
 */
export const CreditApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreditApiFp(configuration)
    return {
        /**
         *
         * @summary Execute Credit Transfer (formerly Credit Transfer Order)
         * @param {FoolCommerceDtoCreditServiceExecuteCreditTransferRequest} [foolCommerceDtoCreditServiceExecuteCreditTransferRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeCreditTransfer(foolCommerceDtoCreditServiceExecuteCreditTransferRequest?: FoolCommerceDtoCreditServiceExecuteCreditTransferRequest, options?: any): AxiosPromise<Array<FoolCommerceDtoCreditServiceExecuteTransferOrderResponse>> {
            return localVarFp.executeCreditTransfer(foolCommerceDtoCreditServiceExecuteCreditTransferRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Credit Transfer Quote (formerly \'Subscription Transfer State\')
         * @param {FoolCommerceDtoCreditServiceCreditTransferQuoteRequest} [foolCommerceDtoCreditServiceCreditTransferQuoteRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreditTransferQuote(foolCommerceDtoCreditServiceCreditTransferQuoteRequest?: FoolCommerceDtoCreditServiceCreditTransferQuoteRequest, options?: any): AxiosPromise<FoolCommerceDtoCreditServiceCreditTransferQuoteResponse> {
            return localVarFp.getCreditTransferQuote(foolCommerceDtoCreditServiceCreditTransferQuoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Is User Eligibile For One Time Pro-Rated Refund
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUserEligibleForOneTimeProRatedRefund(uid: number, options?: any): AxiosPromise<FoolCommerceDtoProRatedRefundEligible> {
            return localVarFp.isUserEligibleForOneTimeProRatedRefund(uid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Rollback a Subscription that was transferred using Credit Tool
         * @param {FoolCommerceDtoSubscriptionCreditTransferRollbackForm} [foolCommerceDtoSubscriptionCreditTransferRollbackForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackSubscriptionCreditTransfer(foolCommerceDtoSubscriptionCreditTransferRollbackForm?: FoolCommerceDtoSubscriptionCreditTransferRollbackForm, options?: any): AxiosPromise<FoolCommerceDtoSubscriptionCreditTransferRollbackResponse> {
            return localVarFp.rollbackSubscriptionCreditTransfer(foolCommerceDtoSubscriptionCreditTransferRollbackForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Subscription Purchase Amount
         * @param {string} promotion
         * @param {number} offerId
         * @param {number} amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionPurchaseAmount(promotion: string, offerId: number, amount: number, options?: any): AxiosPromise<number> {
            return localVarFp.subscriptionPurchaseAmount(promotion, offerId, amount, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Subscription Purchase Amounts
         * @param {string} promotion
         * @param {number} amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionPurchaseAmounts(promotion: string, amount: number, options?: any): AxiosPromise<Array<FoolCommerceDtoCreditServiceSubscriptionTransferToResponse>> {
            return localVarFp.subscriptionPurchaseAmounts(promotion, amount, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Subscription Trade-In Amounts
         * @param {string} promotion
         * @param {number} subscriptionId
         * @param {boolean} [useFullValue]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionTradeInAmounts(promotion: string, subscriptionId: number, useFullValue?: boolean, options?: any): AxiosPromise<Array<FoolCommerceDtoCreditServiceSubscriptionTransferToResponse>> {
            return localVarFp.subscriptionTradeInAmounts(promotion, subscriptionId, useFullValue, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Subscription Transfer Value
         * @param {number} subscriptionId
         * @param {boolean} [showFullValue]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionTransferValue(subscriptionId: number, showFullValue?: boolean, options?: any): AxiosPromise<FoolCommerceDtoMoney> {
            return localVarFp.subscriptionTransferValue(subscriptionId, showFullValue, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update Pro Rated Refund Eligibility Status
         * @param {FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest} [foolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProRatedEligibilityStatus(foolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest?: FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest, options?: any): AxiosPromise<FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusResponse> {
            return localVarFp.updateProRatedEligibilityStatus(foolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreditApi - object-oriented interface
 * @export
 * @class CreditApi
 * @extends {BaseAPI}
 */
export class CreditApi extends BaseAPI {
    /**
     *
     * @summary Execute Credit Transfer (formerly Credit Transfer Order)
     * @param {FoolCommerceDtoCreditServiceExecuteCreditTransferRequest} [foolCommerceDtoCreditServiceExecuteCreditTransferRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditApi
     */
    public executeCreditTransfer(foolCommerceDtoCreditServiceExecuteCreditTransferRequest?: FoolCommerceDtoCreditServiceExecuteCreditTransferRequest, options?: AxiosRequestConfig) {
        return CreditApiFp(this.configuration).executeCreditTransfer(foolCommerceDtoCreditServiceExecuteCreditTransferRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Credit Transfer Quote (formerly \'Subscription Transfer State\')
     * @param {FoolCommerceDtoCreditServiceCreditTransferQuoteRequest} [foolCommerceDtoCreditServiceCreditTransferQuoteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditApi
     */
    public getCreditTransferQuote(foolCommerceDtoCreditServiceCreditTransferQuoteRequest?: FoolCommerceDtoCreditServiceCreditTransferQuoteRequest, options?: AxiosRequestConfig) {
        return CreditApiFp(this.configuration).getCreditTransferQuote(foolCommerceDtoCreditServiceCreditTransferQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Is User Eligibile For One Time Pro-Rated Refund
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditApi
     */
    public isUserEligibleForOneTimeProRatedRefund(uid: number, options?: AxiosRequestConfig) {
        return CreditApiFp(this.configuration).isUserEligibleForOneTimeProRatedRefund(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Rollback a Subscription that was transferred using Credit Tool
     * @param {FoolCommerceDtoSubscriptionCreditTransferRollbackForm} [foolCommerceDtoSubscriptionCreditTransferRollbackForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditApi
     */
    public rollbackSubscriptionCreditTransfer(foolCommerceDtoSubscriptionCreditTransferRollbackForm?: FoolCommerceDtoSubscriptionCreditTransferRollbackForm, options?: AxiosRequestConfig) {
        return CreditApiFp(this.configuration).rollbackSubscriptionCreditTransfer(foolCommerceDtoSubscriptionCreditTransferRollbackForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Subscription Purchase Amount
     * @param {string} promotion
     * @param {number} offerId
     * @param {number} amount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditApi
     */
    public subscriptionPurchaseAmount(promotion: string, offerId: number, amount: number, options?: AxiosRequestConfig) {
        return CreditApiFp(this.configuration).subscriptionPurchaseAmount(promotion, offerId, amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Subscription Purchase Amounts
     * @param {string} promotion
     * @param {number} amount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditApi
     */
    public subscriptionPurchaseAmounts(promotion: string, amount: number, options?: AxiosRequestConfig) {
        return CreditApiFp(this.configuration).subscriptionPurchaseAmounts(promotion, amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Subscription Trade-In Amounts
     * @param {string} promotion
     * @param {number} subscriptionId
     * @param {boolean} [useFullValue]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditApi
     */
    public subscriptionTradeInAmounts(promotion: string, subscriptionId: number, useFullValue?: boolean, options?: AxiosRequestConfig) {
        return CreditApiFp(this.configuration).subscriptionTradeInAmounts(promotion, subscriptionId, useFullValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Subscription Transfer Value
     * @param {number} subscriptionId
     * @param {boolean} [showFullValue]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditApi
     */
    public subscriptionTransferValue(subscriptionId: number, showFullValue?: boolean, options?: AxiosRequestConfig) {
        return CreditApiFp(this.configuration).subscriptionTransferValue(subscriptionId, showFullValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update Pro Rated Refund Eligibility Status
     * @param {FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest} [foolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditApi
     */
    public updateProRatedEligibilityStatus(foolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest?: FoolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest, options?: AxiosRequestConfig) {
        return CreditApiFp(this.configuration).updateProRatedEligibilityStatus(foolCommerceDtoCreditServiceUpdateProRatedEligibilityStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DiscountApi - axios parameter creator
 * @export
 */
export const DiscountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create Discount Offer
         * @param {number} productId
         * @param {string} [name]
         * @param {string} [expirationDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscountOffer: async (productId: number, name?: string, expirationDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('createDiscountOffer', 'productId', productId)
            const localVarPath = `/v1/discounts/create/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (expirationDate !== undefined) {
                localVarQueryParameter['expirationDate'] = (expirationDate as any instanceof Date) ?
                    (expirationDate as any).toISOString() :
                    expirationDate;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create Discount Offer With Multiple Products
         * @param {FoolCommerceDtoCreateDiscountForm} [foolCommerceDtoCreateDiscountForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscountOfferWithMultipleProducts: async (foolCommerceDtoCreateDiscountForm?: FoolCommerceDtoCreateDiscountForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/discounts/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoCreateDiscountForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Decrease User Discount Balance
         * @param {number} discountId
         * @param {number} uid
         * @param {number} [amount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decreaseValue: async (discountId: number, uid: number, amount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discountId' is not null or undefined
            assertParamExists('decreaseValue', 'discountId', discountId)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('decreaseValue', 'uid', uid)
            const localVarPath = `/v1/discounts/{discountId}/{uid}/decrease`
                .replace(`{${"discountId"}}`, encodeURIComponent(String(discountId)))
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get All Discount Offers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDiscounts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/discounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get User Discount Balance
         * @param {number} discountId
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalance: async (discountId: number, uid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discountId' is not null or undefined
            assertParamExists('getBalance', 'discountId', discountId)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getBalance', 'uid', uid)
            const localVarPath = `/v1/discounts/{discountId}/{uid}`
                .replace(`{${"discountId"}}`, encodeURIComponent(String(discountId)))
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Discount Offer
         * @param {number} discountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscount: async (discountId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discountId' is not null or undefined
            assertParamExists('getDiscount', 'discountId', discountId)
            const localVarPath = `/v1/discounts/{discountId}`
                .replace(`{${"discountId"}}`, encodeURIComponent(String(discountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get User Discounts
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDiscounts: async (uid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserDiscounts', 'uid', uid)
            const localVarPath = `/v1/discounts/users/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Increase User Discount Balance
         * @param {number} discountId
         * @param {number} uid
         * @param {number} [amount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        increaseValue: async (discountId: number, uid: number, amount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discountId' is not null or undefined
            assertParamExists('increaseValue', 'discountId', discountId)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('increaseValue', 'uid', uid)
            const localVarPath = `/v1/discounts/{discountId}/{uid}/increase`
                .replace(`{${"discountId"}}`, encodeURIComponent(String(discountId)))
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set multiple User Discounts for a given Discount Offer
         * @param {number} discountId
         * @param {FoolCommerceDtoBulkUserDiscountForm} [foolCommerceDtoBulkUserDiscountForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMultipleUserDiscounts: async (discountId: number, foolCommerceDtoBulkUserDiscountForm?: FoolCommerceDtoBulkUserDiscountForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discountId' is not null or undefined
            assertParamExists('setMultipleUserDiscounts', 'discountId', discountId)
            const localVarPath = `/v1/discounts/batch/{discountId}`
                .replace(`{${"discountId"}}`, encodeURIComponent(String(discountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoBulkUserDiscountForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set User Discount Balance
         * @param {number} discountId
         * @param {number} uid
         * @param {number} [value]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setValue: async (discountId: number, uid: number, value?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discountId' is not null or undefined
            assertParamExists('setValue', 'discountId', discountId)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('setValue', 'uid', uid)
            const localVarPath = `/v1/discounts/{discountId}/{uid}/set`
                .replace(`{${"discountId"}}`, encodeURIComponent(String(discountId)))
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Discount Offer
         * @param {number} discountId
         * @param {string} [name]
         * @param {string} [expirationDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDiscountOffer: async (discountId: number, name?: string, expirationDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discountId' is not null or undefined
            assertParamExists('updateDiscountOffer', 'discountId', discountId)
            const localVarPath = `/v1/discounts/update/{discountId}`
                .replace(`{${"discountId"}}`, encodeURIComponent(String(discountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (expirationDate !== undefined) {
                localVarQueryParameter['expirationDate'] = (expirationDate as any instanceof Date) ?
                    (expirationDate as any).toISOString() :
                    expirationDate;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DiscountApi - functional programming interface
 * @export
 */
export const DiscountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DiscountApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Create Discount Offer
         * @param {number} productId
         * @param {string} [name]
         * @param {string} [expirationDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDiscountOffer(productId: number, name?: string, expirationDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoDiscountOffer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDiscountOffer(productId, name, expirationDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create Discount Offer With Multiple Products
         * @param {FoolCommerceDtoCreateDiscountForm} [foolCommerceDtoCreateDiscountForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDiscountOfferWithMultipleProducts(foolCommerceDtoCreateDiscountForm?: FoolCommerceDtoCreateDiscountForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoDiscountOffer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDiscountOfferWithMultipleProducts(foolCommerceDtoCreateDiscountForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Decrease User Discount Balance
         * @param {number} discountId
         * @param {number} uid
         * @param {number} [amount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async decreaseValue(discountId: number, uid: number, amount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoUserDiscount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.decreaseValue(discountId, uid, amount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get All Discount Offers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDiscounts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoDiscountOffer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDiscounts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get User Discount Balance
         * @param {number} discountId
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBalance(discountId: number, uid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoUserDiscount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBalance(discountId, uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Discount Offer
         * @param {number} discountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDiscount(discountId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoDiscountOffer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDiscount(discountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get User Discounts
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDiscounts(uid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoUserDiscount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDiscounts(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Increase User Discount Balance
         * @param {number} discountId
         * @param {number} uid
         * @param {number} [amount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async increaseValue(discountId: number, uid: number, amount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoUserDiscount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.increaseValue(discountId, uid, amount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Set multiple User Discounts for a given Discount Offer
         * @param {number} discountId
         * @param {FoolCommerceDtoBulkUserDiscountForm} [foolCommerceDtoBulkUserDiscountForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setMultipleUserDiscounts(discountId: number, foolCommerceDtoBulkUserDiscountForm?: FoolCommerceDtoBulkUserDiscountForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setMultipleUserDiscounts(discountId, foolCommerceDtoBulkUserDiscountForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Set User Discount Balance
         * @param {number} discountId
         * @param {number} uid
         * @param {number} [value]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setValue(discountId: number, uid: number, value?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoUserDiscount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setValue(discountId, uid, value, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update Discount Offer
         * @param {number} discountId
         * @param {string} [name]
         * @param {string} [expirationDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDiscountOffer(discountId: number, name?: string, expirationDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoDiscountOffer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDiscountOffer(discountId, name, expirationDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DiscountApi - factory interface
 * @export
 */
export const DiscountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DiscountApiFp(configuration)
    return {
        /**
         *
         * @summary Create Discount Offer
         * @param {number} productId
         * @param {string} [name]
         * @param {string} [expirationDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscountOffer(productId: number, name?: string, expirationDate?: string, options?: any): AxiosPromise<FoolCommerceDtoDiscountOffer> {
            return localVarFp.createDiscountOffer(productId, name, expirationDate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create Discount Offer With Multiple Products
         * @param {FoolCommerceDtoCreateDiscountForm} [foolCommerceDtoCreateDiscountForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscountOfferWithMultipleProducts(foolCommerceDtoCreateDiscountForm?: FoolCommerceDtoCreateDiscountForm, options?: any): AxiosPromise<FoolCommerceDtoDiscountOffer> {
            return localVarFp.createDiscountOfferWithMultipleProducts(foolCommerceDtoCreateDiscountForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Decrease User Discount Balance
         * @param {number} discountId
         * @param {number} uid
         * @param {number} [amount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decreaseValue(discountId: number, uid: number, amount?: number, options?: any): AxiosPromise<FoolCommerceDtoUserDiscount> {
            return localVarFp.decreaseValue(discountId, uid, amount, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get All Discount Offers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDiscounts(options?: any): AxiosPromise<Array<FoolCommerceDtoDiscountOffer>> {
            return localVarFp.getAllDiscounts(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get User Discount Balance
         * @param {number} discountId
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalance(discountId: number, uid: number, options?: any): AxiosPromise<FoolCommerceDtoUserDiscount> {
            return localVarFp.getBalance(discountId, uid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Discount Offer
         * @param {number} discountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscount(discountId: number, options?: any): AxiosPromise<FoolCommerceDtoDiscountOffer> {
            return localVarFp.getDiscount(discountId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get User Discounts
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDiscounts(uid: number, options?: any): AxiosPromise<Array<FoolCommerceDtoUserDiscount>> {
            return localVarFp.getUserDiscounts(uid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Increase User Discount Balance
         * @param {number} discountId
         * @param {number} uid
         * @param {number} [amount]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        increaseValue(discountId: number, uid: number, amount?: number, options?: any): AxiosPromise<FoolCommerceDtoUserDiscount> {
            return localVarFp.increaseValue(discountId, uid, amount, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set multiple User Discounts for a given Discount Offer
         * @param {number} discountId
         * @param {FoolCommerceDtoBulkUserDiscountForm} [foolCommerceDtoBulkUserDiscountForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMultipleUserDiscounts(discountId: number, foolCommerceDtoBulkUserDiscountForm?: FoolCommerceDtoBulkUserDiscountForm, options?: any): AxiosPromise<string> {
            return localVarFp.setMultipleUserDiscounts(discountId, foolCommerceDtoBulkUserDiscountForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set User Discount Balance
         * @param {number} discountId
         * @param {number} uid
         * @param {number} [value]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setValue(discountId: number, uid: number, value?: number, options?: any): AxiosPromise<FoolCommerceDtoUserDiscount> {
            return localVarFp.setValue(discountId, uid, value, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update Discount Offer
         * @param {number} discountId
         * @param {string} [name]
         * @param {string} [expirationDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDiscountOffer(discountId: number, name?: string, expirationDate?: string, options?: any): AxiosPromise<FoolCommerceDtoDiscountOffer> {
            return localVarFp.updateDiscountOffer(discountId, name, expirationDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DiscountApi - object-oriented interface
 * @export
 * @class DiscountApi
 * @extends {BaseAPI}
 */
export class DiscountApi extends BaseAPI {
    /**
     *
     * @summary Create Discount Offer
     * @param {number} productId
     * @param {string} [name]
     * @param {string} [expirationDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountApi
     */
    public createDiscountOffer(productId: number, name?: string, expirationDate?: string, options?: AxiosRequestConfig) {
        return DiscountApiFp(this.configuration).createDiscountOffer(productId, name, expirationDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create Discount Offer With Multiple Products
     * @param {FoolCommerceDtoCreateDiscountForm} [foolCommerceDtoCreateDiscountForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountApi
     */
    public createDiscountOfferWithMultipleProducts(foolCommerceDtoCreateDiscountForm?: FoolCommerceDtoCreateDiscountForm, options?: AxiosRequestConfig) {
        return DiscountApiFp(this.configuration).createDiscountOfferWithMultipleProducts(foolCommerceDtoCreateDiscountForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Decrease User Discount Balance
     * @param {number} discountId
     * @param {number} uid
     * @param {number} [amount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountApi
     */
    public decreaseValue(discountId: number, uid: number, amount?: number, options?: AxiosRequestConfig) {
        return DiscountApiFp(this.configuration).decreaseValue(discountId, uid, amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get All Discount Offers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountApi
     */
    public getAllDiscounts(options?: AxiosRequestConfig) {
        return DiscountApiFp(this.configuration).getAllDiscounts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get User Discount Balance
     * @param {number} discountId
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountApi
     */
    public getBalance(discountId: number, uid: number, options?: AxiosRequestConfig) {
        return DiscountApiFp(this.configuration).getBalance(discountId, uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Discount Offer
     * @param {number} discountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountApi
     */
    public getDiscount(discountId: number, options?: AxiosRequestConfig) {
        return DiscountApiFp(this.configuration).getDiscount(discountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get User Discounts
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountApi
     */
    public getUserDiscounts(uid: number, options?: AxiosRequestConfig) {
        return DiscountApiFp(this.configuration).getUserDiscounts(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Increase User Discount Balance
     * @param {number} discountId
     * @param {number} uid
     * @param {number} [amount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountApi
     */
    public increaseValue(discountId: number, uid: number, amount?: number, options?: AxiosRequestConfig) {
        return DiscountApiFp(this.configuration).increaseValue(discountId, uid, amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Set multiple User Discounts for a given Discount Offer
     * @param {number} discountId
     * @param {FoolCommerceDtoBulkUserDiscountForm} [foolCommerceDtoBulkUserDiscountForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountApi
     */
    public setMultipleUserDiscounts(discountId: number, foolCommerceDtoBulkUserDiscountForm?: FoolCommerceDtoBulkUserDiscountForm, options?: AxiosRequestConfig) {
        return DiscountApiFp(this.configuration).setMultipleUserDiscounts(discountId, foolCommerceDtoBulkUserDiscountForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Set User Discount Balance
     * @param {number} discountId
     * @param {number} uid
     * @param {number} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountApi
     */
    public setValue(discountId: number, uid: number, value?: number, options?: AxiosRequestConfig) {
        return DiscountApiFp(this.configuration).setValue(discountId, uid, value, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update Discount Offer
     * @param {number} discountId
     * @param {string} [name]
     * @param {string} [expirationDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountApi
     */
    public updateDiscountOffer(discountId: number, name?: string, expirationDate?: string, options?: AxiosRequestConfig) {
        return DiscountApiFp(this.configuration).updateDiscountOffer(discountId, name, expirationDate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HelpdeskApi - axios parameter creator
 * @export
 */
export const HelpdeskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Returns list of macros from Helpdesk API, which are used to Create / Solve Tickets, stored in cache
         * @param {boolean} [refreshCache]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCachedMacros: async (refreshCache?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/helpdesk/macros`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refreshCache !== undefined) {
                localVarQueryParameter['refreshCache'] = refreshCache;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns all ticket fields from Helpdesk API, stored in cache
         * @param {boolean} [refreshCache]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCachedTicketFields: async (refreshCache?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/helpdesk/ticket-fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refreshCache !== undefined) {
                localVarQueryParameter['refreshCache'] = refreshCache;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns a macro from Helpdesk API
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMacro: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMacro', 'id', id)
            const localVarPath = `/v1/helpdesk/macros/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns list of helpdesk tickets associated with the given user\'s email address
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserHelpdeskTicketsByEmail: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getUserHelpdeskTicketsByEmail', 'email', email)
            const localVarPath = `/v1/helpdesk/{email}/tickets`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns list of helpdesk tickets associated with the given uid
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserHelpdeskTicketsByUid: async (uid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserHelpdeskTicketsByUid', 'uid', uid)
            const localVarPath = `/v1/helpdesk/{uid}/tickets`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HelpdeskApi - functional programming interface
 * @export
 */
export const HelpdeskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HelpdeskApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Returns list of macros from Helpdesk API, which are used to Create / Solve Tickets, stored in cache
         * @param {boolean} [refreshCache]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCachedMacros(refreshCache?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoHelpdeskMacro>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCachedMacros(refreshCache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Returns all ticket fields from Helpdesk API, stored in cache
         * @param {boolean} [refreshCache]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCachedTicketFields(refreshCache?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoHelpdeskTicketField>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCachedTicketFields(refreshCache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Returns a macro from Helpdesk API
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMacro(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoHelpdeskMacro>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMacro(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Returns list of helpdesk tickets associated with the given user\'s email address
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserHelpdeskTicketsByEmail(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoHelpdeskTicket>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserHelpdeskTicketsByEmail(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Returns list of helpdesk tickets associated with the given uid
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserHelpdeskTicketsByUid(uid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoHelpdeskTicket>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserHelpdeskTicketsByUid(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HelpdeskApi - factory interface
 * @export
 */
export const HelpdeskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HelpdeskApiFp(configuration)
    return {
        /**
         *
         * @summary Returns list of macros from Helpdesk API, which are used to Create / Solve Tickets, stored in cache
         * @param {boolean} [refreshCache]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCachedMacros(refreshCache?: boolean, options?: any): AxiosPromise<Array<FoolCommerceDtoHelpdeskMacro>> {
            return localVarFp.getCachedMacros(refreshCache, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns all ticket fields from Helpdesk API, stored in cache
         * @param {boolean} [refreshCache]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCachedTicketFields(refreshCache?: boolean, options?: any): AxiosPromise<Array<FoolCommerceDtoHelpdeskTicketField>> {
            return localVarFp.getCachedTicketFields(refreshCache, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns a macro from Helpdesk API
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMacro(id: number, options?: any): AxiosPromise<FoolCommerceDtoHelpdeskMacro> {
            return localVarFp.getMacro(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns list of helpdesk tickets associated with the given user\'s email address
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserHelpdeskTicketsByEmail(email: string, options?: any): AxiosPromise<Array<FoolCommerceDtoHelpdeskTicket>> {
            return localVarFp.getUserHelpdeskTicketsByEmail(email, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns list of helpdesk tickets associated with the given uid
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserHelpdeskTicketsByUid(uid: number, options?: any): AxiosPromise<Array<FoolCommerceDtoHelpdeskTicket>> {
            return localVarFp.getUserHelpdeskTicketsByUid(uid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HelpdeskApi - object-oriented interface
 * @export
 * @class HelpdeskApi
 * @extends {BaseAPI}
 */
export class HelpdeskApi extends BaseAPI {
    /**
     *
     * @summary Returns list of macros from Helpdesk API, which are used to Create / Solve Tickets, stored in cache
     * @param {boolean} [refreshCache]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpdeskApi
     */
    public getCachedMacros(refreshCache?: boolean, options?: AxiosRequestConfig) {
        return HelpdeskApiFp(this.configuration).getCachedMacros(refreshCache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Returns all ticket fields from Helpdesk API, stored in cache
     * @param {boolean} [refreshCache]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpdeskApi
     */
    public getCachedTicketFields(refreshCache?: boolean, options?: AxiosRequestConfig) {
        return HelpdeskApiFp(this.configuration).getCachedTicketFields(refreshCache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Returns a macro from Helpdesk API
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpdeskApi
     */
    public getMacro(id: number, options?: AxiosRequestConfig) {
        return HelpdeskApiFp(this.configuration).getMacro(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Returns list of helpdesk tickets associated with the given user\'s email address
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpdeskApi
     */
    public getUserHelpdeskTicketsByEmail(email: string, options?: AxiosRequestConfig) {
        return HelpdeskApiFp(this.configuration).getUserHelpdeskTicketsByEmail(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Returns list of helpdesk tickets associated with the given uid
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpdeskApi
     */
    public getUserHelpdeskTicketsByUid(uid: number, options?: AxiosRequestConfig) {
        return HelpdeskApiFp(this.configuration).getUserHelpdeskTicketsByUid(uid, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create an Apple Pay order
         * @param {FoolCommerceDtoApplePayOrderForm} [foolCommerceDtoApplePayOrderForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptApplePayOrder: async (foolCommerceDtoApplePayOrderForm?: FoolCommerceDtoApplePayOrderForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/orders/apple-pay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoApplePayOrderForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a Comp Order (no Payment Method associated)
         * @param {FoolCommerceDtoCompOrderForm} [foolCommerceDtoCompOrderForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCompOrder: async (foolCommerceDtoCompOrderForm?: FoolCommerceDtoCompOrderForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/orders/comp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoCompOrderForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a credit card order
         * @param {FoolCommerceDtoCreditCardOrderForm} [foolCommerceDtoCreditCardOrderForm] Credit card order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCreditCardOrder: async (foolCommerceDtoCreditCardOrderForm?: FoolCommerceDtoCreditCardOrderForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/orders/credit-card`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoCreditCardOrderForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create an ACH order
         * @param {FoolCommerceDtoElectronicCheckOrderForm} [foolCommerceDtoElectronicCheckOrderForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptElectronicCheckOrder: async (foolCommerceDtoElectronicCheckOrderForm?: FoolCommerceDtoElectronicCheckOrderForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/orders/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoElectronicCheckOrderForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create an order with a payment method ID (Fool Pass)
         * @param {FoolCommerceDtoPaymentMethodOrderForm} [foolCommerceDtoPaymentMethodOrderForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptPaymentMethodOrder: async (foolCommerceDtoPaymentMethodOrderForm?: FoolCommerceDtoPaymentMethodOrderForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/orders/payment-method`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoPaymentMethodOrderForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a Split Credit Card order
         * @param {FoolCommerceDtoSplitCreditCardOrderForm} [foolCommerceDtoSplitCreditCardOrderForm] Credit card order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptSplitCreditCardOrder: async (foolCommerceDtoSplitCreditCardOrderForm?: FoolCommerceDtoSplitCreditCardOrderForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/orders/credit-cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoSplitCreditCardOrderForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Processes a more strict credit card order. Required Security Code
         * @param {FoolCommerceDtoStrictCreditCardOrderForm} [foolCommerceDtoStrictCreditCardOrderForm] Credit card order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptStrictCreditCardOrder: async (foolCommerceDtoStrictCreditCardOrderForm?: FoolCommerceDtoStrictCreditCardOrderForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/orders/credit-card-strict`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoStrictCreditCardOrderForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns list of users highlighted as potential fraud risk within a specified date range, along with NumberOfOrders placed.  Note: Potential fraud risk is defined as attempting orders with at least 3 different payment methods within a specified number of hours.
         * @param {string} [reportDate] Data type is DATE, not DATETIME.
         * @param {number} [minPaymentMethods] Must be greater than or equal to 3.
         * @param {number} [subsequentPaymentMinutes] Must be less than 1440 (one day).
         * @param {number} [uid]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFraudRiskOrderDetails: async (reportDate?: string, minPaymentMethods?: number, subsequentPaymentMinutes?: number, uid?: number, email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/orders/fraud-risk-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reportDate !== undefined) {
                localVarQueryParameter['reportDate'] = (reportDate as any instanceof Date) ?
                    (reportDate as any).toISOString() :
                    reportDate;
            }

            if (minPaymentMethods !== undefined) {
                localVarQueryParameter['minPaymentMethods'] = minPaymentMethods;
            }

            if (subsequentPaymentMinutes !== undefined) {
                localVarQueryParameter['subsequentPaymentMinutes'] = subsequentPaymentMinutes;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderById: async (orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getOrderById', 'orderId', orderId)
            const localVarPath = `/v1/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderReceiptByOrderId: async (orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getOrderReceiptByOrderId', 'orderId', orderId)
            const localVarPath = `/v1/orders/receipt/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} orderId
         * @param {boolean} [updateOrderReceiptIfExists]
         * @param {boolean} [publishOrderReceiptGeneratedMessage]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAndPublishOrderReceiptDetail: async (orderId: number, updateOrderReceiptIfExists?: boolean, publishOrderReceiptGeneratedMessage?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updateAndPublishOrderReceiptDetail', 'orderId', orderId)
            const localVarPath = `/v1/orders/{orderId}/update-publish-receipt-detail`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (updateOrderReceiptIfExists !== undefined) {
                localVarQueryParameter['updateOrderReceiptIfExists'] = updateOrderReceiptIfExists;
            }

            if (publishOrderReceiptGeneratedMessage !== undefined) {
                localVarQueryParameter['publishOrderReceiptGeneratedMessage'] = publishOrderReceiptGeneratedMessage;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Create an Apple Pay order
         * @param {FoolCommerceDtoApplePayOrderForm} [foolCommerceDtoApplePayOrderForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptApplePayOrder(foolCommerceDtoApplePayOrderForm?: FoolCommerceDtoApplePayOrderForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoOrderConfirmation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptApplePayOrder(foolCommerceDtoApplePayOrderForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create a Comp Order (no Payment Method associated)
         * @param {FoolCommerceDtoCompOrderForm} [foolCommerceDtoCompOrderForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptCompOrder(foolCommerceDtoCompOrderForm?: FoolCommerceDtoCompOrderForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoOrderConfirmation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptCompOrder(foolCommerceDtoCompOrderForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create a credit card order
         * @param {FoolCommerceDtoCreditCardOrderForm} [foolCommerceDtoCreditCardOrderForm] Credit card order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptCreditCardOrder(foolCommerceDtoCreditCardOrderForm?: FoolCommerceDtoCreditCardOrderForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoOrderConfirmation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptCreditCardOrder(foolCommerceDtoCreditCardOrderForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create an ACH order
         * @param {FoolCommerceDtoElectronicCheckOrderForm} [foolCommerceDtoElectronicCheckOrderForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptElectronicCheckOrder(foolCommerceDtoElectronicCheckOrderForm?: FoolCommerceDtoElectronicCheckOrderForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoOrderConfirmation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptElectronicCheckOrder(foolCommerceDtoElectronicCheckOrderForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create an order with a payment method ID (Fool Pass)
         * @param {FoolCommerceDtoPaymentMethodOrderForm} [foolCommerceDtoPaymentMethodOrderForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptPaymentMethodOrder(foolCommerceDtoPaymentMethodOrderForm?: FoolCommerceDtoPaymentMethodOrderForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoOrderConfirmation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptPaymentMethodOrder(foolCommerceDtoPaymentMethodOrderForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create a Split Credit Card order
         * @param {FoolCommerceDtoSplitCreditCardOrderForm} [foolCommerceDtoSplitCreditCardOrderForm] Credit card order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptSplitCreditCardOrder(foolCommerceDtoSplitCreditCardOrderForm?: FoolCommerceDtoSplitCreditCardOrderForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoOrderConfirmation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptSplitCreditCardOrder(foolCommerceDtoSplitCreditCardOrderForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Processes a more strict credit card order. Required Security Code
         * @param {FoolCommerceDtoStrictCreditCardOrderForm} [foolCommerceDtoStrictCreditCardOrderForm] Credit card order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptStrictCreditCardOrder(foolCommerceDtoStrictCreditCardOrderForm?: FoolCommerceDtoStrictCreditCardOrderForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoOrderConfirmation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptStrictCreditCardOrder(foolCommerceDtoStrictCreditCardOrderForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Returns list of users highlighted as potential fraud risk within a specified date range, along with NumberOfOrders placed.  Note: Potential fraud risk is defined as attempting orders with at least 3 different payment methods within a specified number of hours.
         * @param {string} [reportDate] Data type is DATE, not DATETIME.
         * @param {number} [minPaymentMethods] Must be greater than or equal to 3.
         * @param {number} [subsequentPaymentMinutes] Must be less than 1440 (one day).
         * @param {number} [uid]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFraudRiskOrderDetails(reportDate?: string, minPaymentMethods?: number, subsequentPaymentMinutes?: number, uid?: number, email?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoFraudRiskOrderDetail>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFraudRiskOrderDetails(reportDate, minPaymentMethods, subsequentPaymentMinutes, uid, email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderById(orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderById(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderReceiptByOrderId(orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoOrderReceipt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderReceiptByOrderId(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} orderId
         * @param {boolean} [updateOrderReceiptIfExists]
         * @param {boolean} [publishOrderReceiptGeneratedMessage]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAndPublishOrderReceiptDetail(orderId: number, updateOrderReceiptIfExists?: boolean, publishOrderReceiptGeneratedMessage?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoOrderReceipt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAndPublishOrderReceiptDetail(orderId, updateOrderReceiptIfExists, publishOrderReceiptGeneratedMessage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         *
         * @summary Create an Apple Pay order
         * @param {FoolCommerceDtoApplePayOrderForm} [foolCommerceDtoApplePayOrderForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptApplePayOrder(foolCommerceDtoApplePayOrderForm?: FoolCommerceDtoApplePayOrderForm, options?: any): AxiosPromise<FoolCommerceDtoOrderConfirmation> {
            return localVarFp.acceptApplePayOrder(foolCommerceDtoApplePayOrderForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a Comp Order (no Payment Method associated)
         * @param {FoolCommerceDtoCompOrderForm} [foolCommerceDtoCompOrderForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCompOrder(foolCommerceDtoCompOrderForm?: FoolCommerceDtoCompOrderForm, options?: any): AxiosPromise<FoolCommerceDtoOrderConfirmation> {
            return localVarFp.acceptCompOrder(foolCommerceDtoCompOrderForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a credit card order
         * @param {FoolCommerceDtoCreditCardOrderForm} [foolCommerceDtoCreditCardOrderForm] Credit card order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCreditCardOrder(foolCommerceDtoCreditCardOrderForm?: FoolCommerceDtoCreditCardOrderForm, options?: any): AxiosPromise<FoolCommerceDtoOrderConfirmation> {
            return localVarFp.acceptCreditCardOrder(foolCommerceDtoCreditCardOrderForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create an ACH order
         * @param {FoolCommerceDtoElectronicCheckOrderForm} [foolCommerceDtoElectronicCheckOrderForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptElectronicCheckOrder(foolCommerceDtoElectronicCheckOrderForm?: FoolCommerceDtoElectronicCheckOrderForm, options?: any): AxiosPromise<FoolCommerceDtoOrderConfirmation> {
            return localVarFp.acceptElectronicCheckOrder(foolCommerceDtoElectronicCheckOrderForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create an order with a payment method ID (Fool Pass)
         * @param {FoolCommerceDtoPaymentMethodOrderForm} [foolCommerceDtoPaymentMethodOrderForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptPaymentMethodOrder(foolCommerceDtoPaymentMethodOrderForm?: FoolCommerceDtoPaymentMethodOrderForm, options?: any): AxiosPromise<FoolCommerceDtoOrderConfirmation> {
            return localVarFp.acceptPaymentMethodOrder(foolCommerceDtoPaymentMethodOrderForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a Split Credit Card order
         * @param {FoolCommerceDtoSplitCreditCardOrderForm} [foolCommerceDtoSplitCreditCardOrderForm] Credit card order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptSplitCreditCardOrder(foolCommerceDtoSplitCreditCardOrderForm?: FoolCommerceDtoSplitCreditCardOrderForm, options?: any): AxiosPromise<FoolCommerceDtoOrderConfirmation> {
            return localVarFp.acceptSplitCreditCardOrder(foolCommerceDtoSplitCreditCardOrderForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Processes a more strict credit card order. Required Security Code
         * @param {FoolCommerceDtoStrictCreditCardOrderForm} [foolCommerceDtoStrictCreditCardOrderForm] Credit card order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptStrictCreditCardOrder(foolCommerceDtoStrictCreditCardOrderForm?: FoolCommerceDtoStrictCreditCardOrderForm, options?: any): AxiosPromise<FoolCommerceDtoOrderConfirmation> {
            return localVarFp.acceptStrictCreditCardOrder(foolCommerceDtoStrictCreditCardOrderForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns list of users highlighted as potential fraud risk within a specified date range, along with NumberOfOrders placed.  Note: Potential fraud risk is defined as attempting orders with at least 3 different payment methods within a specified number of hours.
         * @param {string} [reportDate] Data type is DATE, not DATETIME.
         * @param {number} [minPaymentMethods] Must be greater than or equal to 3.
         * @param {number} [subsequentPaymentMinutes] Must be less than 1440 (one day).
         * @param {number} [uid]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFraudRiskOrderDetails(reportDate?: string, minPaymentMethods?: number, subsequentPaymentMinutes?: number, uid?: number, email?: string, options?: any): AxiosPromise<Array<FoolCommerceDtoFraudRiskOrderDetail>> {
            return localVarFp.getFraudRiskOrderDetails(reportDate, minPaymentMethods, subsequentPaymentMinutes, uid, email, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderById(orderId: number, options?: any): AxiosPromise<FoolCommerceDtoOrder> {
            return localVarFp.getOrderById(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderReceiptByOrderId(orderId: number, options?: any): AxiosPromise<FoolCommerceDtoOrderReceipt> {
            return localVarFp.getOrderReceiptByOrderId(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} orderId
         * @param {boolean} [updateOrderReceiptIfExists]
         * @param {boolean} [publishOrderReceiptGeneratedMessage]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAndPublishOrderReceiptDetail(orderId: number, updateOrderReceiptIfExists?: boolean, publishOrderReceiptGeneratedMessage?: boolean, options?: any): AxiosPromise<FoolCommerceDtoOrderReceipt> {
            return localVarFp.updateAndPublishOrderReceiptDetail(orderId, updateOrderReceiptIfExists, publishOrderReceiptGeneratedMessage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     *
     * @summary Create an Apple Pay order
     * @param {FoolCommerceDtoApplePayOrderForm} [foolCommerceDtoApplePayOrderForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public acceptApplePayOrder(foolCommerceDtoApplePayOrderForm?: FoolCommerceDtoApplePayOrderForm, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).acceptApplePayOrder(foolCommerceDtoApplePayOrderForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create a Comp Order (no Payment Method associated)
     * @param {FoolCommerceDtoCompOrderForm} [foolCommerceDtoCompOrderForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public acceptCompOrder(foolCommerceDtoCompOrderForm?: FoolCommerceDtoCompOrderForm, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).acceptCompOrder(foolCommerceDtoCompOrderForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create a credit card order
     * @param {FoolCommerceDtoCreditCardOrderForm} [foolCommerceDtoCreditCardOrderForm] Credit card order details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public acceptCreditCardOrder(foolCommerceDtoCreditCardOrderForm?: FoolCommerceDtoCreditCardOrderForm, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).acceptCreditCardOrder(foolCommerceDtoCreditCardOrderForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create an ACH order
     * @param {FoolCommerceDtoElectronicCheckOrderForm} [foolCommerceDtoElectronicCheckOrderForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public acceptElectronicCheckOrder(foolCommerceDtoElectronicCheckOrderForm?: FoolCommerceDtoElectronicCheckOrderForm, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).acceptElectronicCheckOrder(foolCommerceDtoElectronicCheckOrderForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create an order with a payment method ID (Fool Pass)
     * @param {FoolCommerceDtoPaymentMethodOrderForm} [foolCommerceDtoPaymentMethodOrderForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public acceptPaymentMethodOrder(foolCommerceDtoPaymentMethodOrderForm?: FoolCommerceDtoPaymentMethodOrderForm, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).acceptPaymentMethodOrder(foolCommerceDtoPaymentMethodOrderForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create a Split Credit Card order
     * @param {FoolCommerceDtoSplitCreditCardOrderForm} [foolCommerceDtoSplitCreditCardOrderForm] Credit card order details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public acceptSplitCreditCardOrder(foolCommerceDtoSplitCreditCardOrderForm?: FoolCommerceDtoSplitCreditCardOrderForm, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).acceptSplitCreditCardOrder(foolCommerceDtoSplitCreditCardOrderForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Processes a more strict credit card order. Required Security Code
     * @param {FoolCommerceDtoStrictCreditCardOrderForm} [foolCommerceDtoStrictCreditCardOrderForm] Credit card order details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public acceptStrictCreditCardOrder(foolCommerceDtoStrictCreditCardOrderForm?: FoolCommerceDtoStrictCreditCardOrderForm, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).acceptStrictCreditCardOrder(foolCommerceDtoStrictCreditCardOrderForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Returns list of users highlighted as potential fraud risk within a specified date range, along with NumberOfOrders placed.  Note: Potential fraud risk is defined as attempting orders with at least 3 different payment methods within a specified number of hours.
     * @param {string} [reportDate] Data type is DATE, not DATETIME.
     * @param {number} [minPaymentMethods] Must be greater than or equal to 3.
     * @param {number} [subsequentPaymentMinutes] Must be less than 1440 (one day).
     * @param {number} [uid]
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getFraudRiskOrderDetails(reportDate?: string, minPaymentMethods?: number, subsequentPaymentMinutes?: number, uid?: number, email?: string, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).getFraudRiskOrderDetails(reportDate, minPaymentMethods, subsequentPaymentMinutes, uid, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrderById(orderId: number, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).getOrderById(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrderReceiptByOrderId(orderId: number, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).getOrderReceiptByOrderId(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} orderId
     * @param {boolean} [updateOrderReceiptIfExists]
     * @param {boolean} [publishOrderReceiptGeneratedMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public updateAndPublishOrderReceiptDetail(orderId: number, updateOrderReceiptIfExists?: boolean, publishOrderReceiptGeneratedMessage?: boolean, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).updateAndPublishOrderReceiptDetail(orderId, updateOrderReceiptIfExists, publishOrderReceiptGeneratedMessage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PaymentMethodsApi - axios parameter creator
 * @export
 */
export const PaymentMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Save or update a credit card for a given account.
         * @param {number} uid
         * @param {FoolCommerceDtoCreditCardForm} [foolCommerceDtoCreditCardForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateCreditCard: async (uid: number, foolCommerceDtoCreditCardForm?: FoolCommerceDtoCreditCardForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('addOrUpdateCreditCard', 'uid', uid)
            const localVarPath = `/v1/accounts/{uid}/payment-methods/credit-card`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoCreditCardForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Save or update a credit card for a given account.
         * @param {number} uid
         * @param {FoolCommerceDtoCreditCardForm} [foolCommerceDtoCreditCardForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateCreditCardForAccount: async (uid: number, foolCommerceDtoCreditCardForm?: FoolCommerceDtoCreditCardForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('addOrUpdateCreditCardForAccount', 'uid', uid)
            const localVarPath = `/v1/users/{uid}/payment-methods/credit-card`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoCreditCardForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Look up a credit card by primary key.
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreditCardById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCreditCardById', 'id', id)
            const localVarPath = `/v1/payment-methods/credit-cards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Look up a generic payment method by primary key.
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPaymentMethodById', 'id', id)
            const localVarPath = `/v1/payment-methods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets a list of all payment methods on file for a given account, or optionally filters  by payment type (credit card or electronic check).
         * @param {number} uid
         * @param {'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any'} [paymentMethods]
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodsForAccount: async (uid: number, paymentMethods?: 'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any', countryCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getPaymentMethodsForAccount', 'uid', uid)
            const localVarPath = `/v1/accounts/{uid}/payment-methods`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paymentMethods !== undefined) {
                localVarQueryParameter['paymentMethods'] = paymentMethods;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Same as GetPaymentMethodsForAccount.
         * @param {number} uid
         * @param {'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any'} [paymentMethods]
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodsForUser: async (uid: number, paymentMethods?: 'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any', countryCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getPaymentMethodsForUser', 'uid', uid)
            const localVarPath = `/v1/users/{uid}/payment-methods`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paymentMethods !== undefined) {
                localVarQueryParameter['paymentMethods'] = paymentMethods;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update default credit card metadata (everything but the number).
         * @param {number} uid
         * @param {FoolCommerceDtoCreditCardMetadataForm} [foolCommerceDtoCreditCardMetadataForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefaultCreditCardMetadata: async (uid: number, foolCommerceDtoCreditCardMetadataForm?: FoolCommerceDtoCreditCardMetadataForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateDefaultCreditCardMetadata', 'uid', uid)
            const localVarPath = `/v1/accounts/{uid}/payment-methods/credit-card-metadata`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoCreditCardMetadataForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentMethodsApi - functional programming interface
 * @export
 */
export const PaymentMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Save or update a credit card for a given account.
         * @param {number} uid
         * @param {FoolCommerceDtoCreditCardForm} [foolCommerceDtoCreditCardForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrUpdateCreditCard(uid: number, foolCommerceDtoCreditCardForm?: FoolCommerceDtoCreditCardForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoCreditCard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrUpdateCreditCard(uid, foolCommerceDtoCreditCardForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Save or update a credit card for a given account.
         * @param {number} uid
         * @param {FoolCommerceDtoCreditCardForm} [foolCommerceDtoCreditCardForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrUpdateCreditCardForAccount(uid: number, foolCommerceDtoCreditCardForm?: FoolCommerceDtoCreditCardForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoCreditCard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrUpdateCreditCardForAccount(uid, foolCommerceDtoCreditCardForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Look up a credit card by primary key.
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCreditCardById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoCreditCard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCreditCardById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Look up a generic payment method by primary key.
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentMethodById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoPaymentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentMethodById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Gets a list of all payment methods on file for a given account, or optionally filters  by payment type (credit card or electronic check).
         * @param {number} uid
         * @param {'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any'} [paymentMethods]
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentMethodsForAccount(uid: number, paymentMethods?: 'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any', countryCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoPaymentMethod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentMethodsForAccount(uid, paymentMethods, countryCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Same as GetPaymentMethodsForAccount.
         * @param {number} uid
         * @param {'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any'} [paymentMethods]
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentMethodsForUser(uid: number, paymentMethods?: 'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any', countryCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoPaymentMethod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentMethodsForUser(uid, paymentMethods, countryCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update default credit card metadata (everything but the number).
         * @param {number} uid
         * @param {FoolCommerceDtoCreditCardMetadataForm} [foolCommerceDtoCreditCardMetadataForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDefaultCreditCardMetadata(uid: number, foolCommerceDtoCreditCardMetadataForm?: FoolCommerceDtoCreditCardMetadataForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoCreditCard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDefaultCreditCardMetadata(uid, foolCommerceDtoCreditCardMetadataForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentMethodsApi - factory interface
 * @export
 */
export const PaymentMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentMethodsApiFp(configuration)
    return {
        /**
         *
         * @summary Save or update a credit card for a given account.
         * @param {number} uid
         * @param {FoolCommerceDtoCreditCardForm} [foolCommerceDtoCreditCardForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateCreditCard(uid: number, foolCommerceDtoCreditCardForm?: FoolCommerceDtoCreditCardForm, options?: any): AxiosPromise<FoolCommerceDtoCreditCard> {
            return localVarFp.addOrUpdateCreditCard(uid, foolCommerceDtoCreditCardForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Save or update a credit card for a given account.
         * @param {number} uid
         * @param {FoolCommerceDtoCreditCardForm} [foolCommerceDtoCreditCardForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateCreditCardForAccount(uid: number, foolCommerceDtoCreditCardForm?: FoolCommerceDtoCreditCardForm, options?: any): AxiosPromise<FoolCommerceDtoCreditCard> {
            return localVarFp.addOrUpdateCreditCardForAccount(uid, foolCommerceDtoCreditCardForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Look up a credit card by primary key.
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreditCardById(id: number, options?: any): AxiosPromise<FoolCommerceDtoCreditCard> {
            return localVarFp.getCreditCardById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Look up a generic payment method by primary key.
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodById(id: number, options?: any): AxiosPromise<FoolCommerceDtoPaymentMethod> {
            return localVarFp.getPaymentMethodById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets a list of all payment methods on file for a given account, or optionally filters  by payment type (credit card or electronic check).
         * @param {number} uid
         * @param {'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any'} [paymentMethods]
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodsForAccount(uid: number, paymentMethods?: 'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any', countryCode?: string, options?: any): AxiosPromise<Array<FoolCommerceDtoPaymentMethod>> {
            return localVarFp.getPaymentMethodsForAccount(uid, paymentMethods, countryCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Same as GetPaymentMethodsForAccount.
         * @param {number} uid
         * @param {'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any'} [paymentMethods]
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodsForUser(uid: number, paymentMethods?: 'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any', countryCode?: string, options?: any): AxiosPromise<Array<FoolCommerceDtoPaymentMethod>> {
            return localVarFp.getPaymentMethodsForUser(uid, paymentMethods, countryCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update default credit card metadata (everything but the number).
         * @param {number} uid
         * @param {FoolCommerceDtoCreditCardMetadataForm} [foolCommerceDtoCreditCardMetadataForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefaultCreditCardMetadata(uid: number, foolCommerceDtoCreditCardMetadataForm?: FoolCommerceDtoCreditCardMetadataForm, options?: any): AxiosPromise<FoolCommerceDtoCreditCard> {
            return localVarFp.updateDefaultCreditCardMetadata(uid, foolCommerceDtoCreditCardMetadataForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentMethodsApi - object-oriented interface
 * @export
 * @class PaymentMethodsApi
 * @extends {BaseAPI}
 */
export class PaymentMethodsApi extends BaseAPI {
    /**
     *
     * @summary Save or update a credit card for a given account.
     * @param {number} uid
     * @param {FoolCommerceDtoCreditCardForm} [foolCommerceDtoCreditCardForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    public addOrUpdateCreditCard(uid: number, foolCommerceDtoCreditCardForm?: FoolCommerceDtoCreditCardForm, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).addOrUpdateCreditCard(uid, foolCommerceDtoCreditCardForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Save or update a credit card for a given account.
     * @param {number} uid
     * @param {FoolCommerceDtoCreditCardForm} [foolCommerceDtoCreditCardForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    public addOrUpdateCreditCardForAccount(uid: number, foolCommerceDtoCreditCardForm?: FoolCommerceDtoCreditCardForm, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).addOrUpdateCreditCardForAccount(uid, foolCommerceDtoCreditCardForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Look up a credit card by primary key.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    public getCreditCardById(id: number, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).getCreditCardById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Look up a generic payment method by primary key.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    public getPaymentMethodById(id: number, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).getPaymentMethodById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Gets a list of all payment methods on file for a given account, or optionally filters  by payment type (credit card or electronic check).
     * @param {number} uid
     * @param {'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any'} [paymentMethods]
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    public getPaymentMethodsForAccount(uid: number, paymentMethods?: 'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any', countryCode?: string, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).getPaymentMethodsForAccount(uid, paymentMethods, countryCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Same as GetPaymentMethodsForAccount.
     * @param {number} uid
     * @param {'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any'} [paymentMethods]
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    public getPaymentMethodsForUser(uid: number, paymentMethods?: 'CreditCard' | 'ElectronicCheck' | 'ApplePay' | 'Any', countryCode?: string, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).getPaymentMethodsForUser(uid, paymentMethods, countryCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update default credit card metadata (everything but the number).
     * @param {number} uid
     * @param {FoolCommerceDtoCreditCardMetadataForm} [foolCommerceDtoCreditCardMetadataForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    public updateDefaultCreditCardMetadata(uid: number, foolCommerceDtoCreditCardMetadataForm?: FoolCommerceDtoCreditCardMetadataForm, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).updateDefaultCreditCardMetadata(uid, foolCommerceDtoCreditCardMetadataForm, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create Single Item Product
         * @param {FoolCommerceDtoCreateSingleItemProductForm} [foolCommerceDtoCreateSingleItemProductForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSingleItemProduct: async (foolCommerceDtoCreateSingleItemProductForm?: FoolCommerceDtoCreateSingleItemProductForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/products/single-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoCreateSingleItemProductForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create Subscription Product
         * @param {FoolCommerceDtoCreateSubscriptionProductForm} [foolCommerceDtoCreateSubscriptionProductForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscriptionProduct: async (foolCommerceDtoCreateSubscriptionProductForm?: FoolCommerceDtoCreateSubscriptionProductForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/products/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoCreateSubscriptionProductForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create Subscription Product Term
         * @param {number} productId
         * @param {FoolCommerceDtoCreateSubscriptionProductTermForm} [foolCommerceDtoCreateSubscriptionProductTermForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscriptionProductTerm: async (productId: number, foolCommerceDtoCreateSubscriptionProductTermForm?: FoolCommerceDtoCreateSubscriptionProductTermForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('createSubscriptionProductTerm', 'productId', productId)
            const localVarPath = `/v1/products/subscriptions/{productId}/terms`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoCreateSubscriptionProductTermForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get SingleItem Product
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleItemProduct: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSingleItemProduct', 'id', id)
            const localVarPath = `/v1/products/single-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Subscription Product
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionProduct: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSubscriptionProduct', 'id', id)
            const localVarPath = `/v1/products/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Active Subscription Products
         * @param {string} countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionProducts: async (countryCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryCode' is not null or undefined
            assertParamExists('getSubscriptionProducts', 'countryCode', countryCode)
            const localVarPath = `/v1/products/subscriptions/{countryCode}`
                .replace(`{${"countryCode"}}`, encodeURIComponent(String(countryCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List Products matching filter criteria.
         * @param {string} [name] Optionally filter on product name contains value.
         * @param {number} [limit] Optionally limit number of results.
         * @param {number} [offset] Optionally skip number of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSingleItemProducts: async (name?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/products/single-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List Subscription Products matching filter criteria.
         * @param {string} [name] Optionally filter on product name contains value.
         * @param {number} [limit] Optionally limit number of results.
         * @param {number} [offset] Optionally skip number of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionProducts: async (name?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/products/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update SingleItem Product
         * @param {number} id
         * @param {FoolCommerceDtoUpdateSingleItemProductForm} [foolCommerceDtoUpdateSingleItemProductForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSingleItemProduct: async (id: number, foolCommerceDtoUpdateSingleItemProductForm?: FoolCommerceDtoUpdateSingleItemProductForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSingleItemProduct', 'id', id)
            const localVarPath = `/v1/products/single-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoUpdateSingleItemProductForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Subscription Product
         * @param {number} id
         * @param {FoolCommerceDtoUpdateSubscriptionProductForm} [foolCommerceDtoUpdateSubscriptionProductForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscriptionProduct: async (id: number, foolCommerceDtoUpdateSubscriptionProductForm?: FoolCommerceDtoUpdateSubscriptionProductForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSubscriptionProduct', 'id', id)
            const localVarPath = `/v1/products/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoUpdateSubscriptionProductForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} productId
         * @param {FoolCommerceDtoUpdateSubscriptionProductLevelForm} [foolCommerceDtoUpdateSubscriptionProductLevelForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscriptionProductLevel: async (productId: number, foolCommerceDtoUpdateSubscriptionProductLevelForm?: FoolCommerceDtoUpdateSubscriptionProductLevelForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updateSubscriptionProductLevel', 'productId', productId)
            const localVarPath = `/v1/products/subscriptions/{productId}/update-level`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoUpdateSubscriptionProductLevelForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Create Single Item Product
         * @param {FoolCommerceDtoCreateSingleItemProductForm} [foolCommerceDtoCreateSingleItemProductForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSingleItemProduct(foolCommerceDtoCreateSingleItemProductForm?: FoolCommerceDtoCreateSingleItemProductForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSingleItemProductDescription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSingleItemProduct(foolCommerceDtoCreateSingleItemProductForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create Subscription Product
         * @param {FoolCommerceDtoCreateSubscriptionProductForm} [foolCommerceDtoCreateSubscriptionProductForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscriptionProduct(foolCommerceDtoCreateSubscriptionProductForm?: FoolCommerceDtoCreateSubscriptionProductForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSubscriptionProductDescription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubscriptionProduct(foolCommerceDtoCreateSubscriptionProductForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create Subscription Product Term
         * @param {number} productId
         * @param {FoolCommerceDtoCreateSubscriptionProductTermForm} [foolCommerceDtoCreateSubscriptionProductTermForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscriptionProductTerm(productId: number, foolCommerceDtoCreateSubscriptionProductTermForm?: FoolCommerceDtoCreateSubscriptionProductTermForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSubscriptionProductOffer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubscriptionProductTerm(productId, foolCommerceDtoCreateSubscriptionProductTermForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get SingleItem Product
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleItemProduct(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSingleItemProductDescription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleItemProduct(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Subscription Product
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionProduct(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSubscriptionProductDescription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptionProduct(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Active Subscription Products
         * @param {string} countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionProducts(countryCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoSubscriptionProductDescription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptionProducts(countryCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary List Products matching filter criteria.
         * @param {string} [name] Optionally filter on product name contains value.
         * @param {number} [limit] Optionally limit number of results.
         * @param {number} [offset] Optionally skip number of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSingleItemProducts(name?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSingleItemProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSingleItemProducts(name, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary List Subscription Products matching filter criteria.
         * @param {string} [name] Optionally filter on product name contains value.
         * @param {number} [limit] Optionally limit number of results.
         * @param {number} [offset] Optionally skip number of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionProducts(name?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSubscriptionProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionProducts(name, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update SingleItem Product
         * @param {number} id
         * @param {FoolCommerceDtoUpdateSingleItemProductForm} [foolCommerceDtoUpdateSingleItemProductForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSingleItemProduct(id: number, foolCommerceDtoUpdateSingleItemProductForm?: FoolCommerceDtoUpdateSingleItemProductForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSingleItemProductDescription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSingleItemProduct(id, foolCommerceDtoUpdateSingleItemProductForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update Subscription Product
         * @param {number} id
         * @param {FoolCommerceDtoUpdateSubscriptionProductForm} [foolCommerceDtoUpdateSubscriptionProductForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscriptionProduct(id: number, foolCommerceDtoUpdateSubscriptionProductForm?: FoolCommerceDtoUpdateSubscriptionProductForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSubscriptionProductDescription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscriptionProduct(id, foolCommerceDtoUpdateSubscriptionProductForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} productId
         * @param {FoolCommerceDtoUpdateSubscriptionProductLevelForm} [foolCommerceDtoUpdateSubscriptionProductLevelForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscriptionProductLevel(productId: number, foolCommerceDtoUpdateSubscriptionProductLevelForm?: FoolCommerceDtoUpdateSubscriptionProductLevelForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscriptionProductLevel(productId, foolCommerceDtoUpdateSubscriptionProductLevelForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         *
         * @summary Create Single Item Product
         * @param {FoolCommerceDtoCreateSingleItemProductForm} [foolCommerceDtoCreateSingleItemProductForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSingleItemProduct(foolCommerceDtoCreateSingleItemProductForm?: FoolCommerceDtoCreateSingleItemProductForm, options?: any): AxiosPromise<FoolCommerceDtoSingleItemProductDescription> {
            return localVarFp.createSingleItemProduct(foolCommerceDtoCreateSingleItemProductForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create Subscription Product
         * @param {FoolCommerceDtoCreateSubscriptionProductForm} [foolCommerceDtoCreateSubscriptionProductForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscriptionProduct(foolCommerceDtoCreateSubscriptionProductForm?: FoolCommerceDtoCreateSubscriptionProductForm, options?: any): AxiosPromise<FoolCommerceDtoSubscriptionProductDescription> {
            return localVarFp.createSubscriptionProduct(foolCommerceDtoCreateSubscriptionProductForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create Subscription Product Term
         * @param {number} productId
         * @param {FoolCommerceDtoCreateSubscriptionProductTermForm} [foolCommerceDtoCreateSubscriptionProductTermForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscriptionProductTerm(productId: number, foolCommerceDtoCreateSubscriptionProductTermForm?: FoolCommerceDtoCreateSubscriptionProductTermForm, options?: any): AxiosPromise<FoolCommerceDtoSubscriptionProductOffer> {
            return localVarFp.createSubscriptionProductTerm(productId, foolCommerceDtoCreateSubscriptionProductTermForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get SingleItem Product
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleItemProduct(id: number, options?: any): AxiosPromise<FoolCommerceDtoSingleItemProductDescription> {
            return localVarFp.getSingleItemProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Subscription Product
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionProduct(id: number, options?: any): AxiosPromise<FoolCommerceDtoSubscriptionProductDescription> {
            return localVarFp.getSubscriptionProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Active Subscription Products
         * @param {string} countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionProducts(countryCode: string, options?: any): AxiosPromise<Array<FoolCommerceDtoSubscriptionProductDescription>> {
            return localVarFp.getSubscriptionProducts(countryCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List Products matching filter criteria.
         * @param {string} [name] Optionally filter on product name contains value.
         * @param {number} [limit] Optionally limit number of results.
         * @param {number} [offset] Optionally skip number of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSingleItemProducts(name?: string, limit?: number, offset?: number, options?: any): AxiosPromise<FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSingleItemProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull> {
            return localVarFp.listSingleItemProducts(name, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List Subscription Products matching filter criteria.
         * @param {string} [name] Optionally filter on product name contains value.
         * @param {number} [limit] Optionally limit number of results.
         * @param {number} [offset] Optionally skip number of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionProducts(name?: string, limit?: number, offset?: number, options?: any): AxiosPromise<FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoSubscriptionProductDescriptionFoolCommerceVersion0000CultureneutralPublicKeyTokennull> {
            return localVarFp.listSubscriptionProducts(name, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update SingleItem Product
         * @param {number} id
         * @param {FoolCommerceDtoUpdateSingleItemProductForm} [foolCommerceDtoUpdateSingleItemProductForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSingleItemProduct(id: number, foolCommerceDtoUpdateSingleItemProductForm?: FoolCommerceDtoUpdateSingleItemProductForm, options?: any): AxiosPromise<FoolCommerceDtoSingleItemProductDescription> {
            return localVarFp.updateSingleItemProduct(id, foolCommerceDtoUpdateSingleItemProductForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update Subscription Product
         * @param {number} id
         * @param {FoolCommerceDtoUpdateSubscriptionProductForm} [foolCommerceDtoUpdateSubscriptionProductForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscriptionProduct(id: number, foolCommerceDtoUpdateSubscriptionProductForm?: FoolCommerceDtoUpdateSubscriptionProductForm, options?: any): AxiosPromise<FoolCommerceDtoSubscriptionProductDescription> {
            return localVarFp.updateSubscriptionProduct(id, foolCommerceDtoUpdateSubscriptionProductForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} productId
         * @param {FoolCommerceDtoUpdateSubscriptionProductLevelForm} [foolCommerceDtoUpdateSubscriptionProductLevelForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscriptionProductLevel(productId: number, foolCommerceDtoUpdateSubscriptionProductLevelForm?: FoolCommerceDtoUpdateSubscriptionProductLevelForm, options?: any): AxiosPromise<void> {
            return localVarFp.updateSubscriptionProductLevel(productId, foolCommerceDtoUpdateSubscriptionProductLevelForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     *
     * @summary Create Single Item Product
     * @param {FoolCommerceDtoCreateSingleItemProductForm} [foolCommerceDtoCreateSingleItemProductForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public createSingleItemProduct(foolCommerceDtoCreateSingleItemProductForm?: FoolCommerceDtoCreateSingleItemProductForm, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).createSingleItemProduct(foolCommerceDtoCreateSingleItemProductForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create Subscription Product
     * @param {FoolCommerceDtoCreateSubscriptionProductForm} [foolCommerceDtoCreateSubscriptionProductForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public createSubscriptionProduct(foolCommerceDtoCreateSubscriptionProductForm?: FoolCommerceDtoCreateSubscriptionProductForm, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).createSubscriptionProduct(foolCommerceDtoCreateSubscriptionProductForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create Subscription Product Term
     * @param {number} productId
     * @param {FoolCommerceDtoCreateSubscriptionProductTermForm} [foolCommerceDtoCreateSubscriptionProductTermForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public createSubscriptionProductTerm(productId: number, foolCommerceDtoCreateSubscriptionProductTermForm?: FoolCommerceDtoCreateSubscriptionProductTermForm, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).createSubscriptionProductTerm(productId, foolCommerceDtoCreateSubscriptionProductTermForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get SingleItem Product
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getSingleItemProduct(id: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).getSingleItemProduct(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Subscription Product
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getSubscriptionProduct(id: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).getSubscriptionProduct(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Active Subscription Products
     * @param {string} countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getSubscriptionProducts(countryCode: string, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).getSubscriptionProducts(countryCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary List Products matching filter criteria.
     * @param {string} [name] Optionally filter on product name contains value.
     * @param {number} [limit] Optionally limit number of results.
     * @param {number} [offset] Optionally skip number of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public listSingleItemProducts(name?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).listSingleItemProducts(name, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary List Subscription Products matching filter criteria.
     * @param {string} [name] Optionally filter on product name contains value.
     * @param {number} [limit] Optionally limit number of results.
     * @param {number} [offset] Optionally skip number of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public listSubscriptionProducts(name?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).listSubscriptionProducts(name, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update SingleItem Product
     * @param {number} id
     * @param {FoolCommerceDtoUpdateSingleItemProductForm} [foolCommerceDtoUpdateSingleItemProductForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public updateSingleItemProduct(id: number, foolCommerceDtoUpdateSingleItemProductForm?: FoolCommerceDtoUpdateSingleItemProductForm, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).updateSingleItemProduct(id, foolCommerceDtoUpdateSingleItemProductForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update Subscription Product
     * @param {number} id
     * @param {FoolCommerceDtoUpdateSubscriptionProductForm} [foolCommerceDtoUpdateSubscriptionProductForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public updateSubscriptionProduct(id: number, foolCommerceDtoUpdateSubscriptionProductForm?: FoolCommerceDtoUpdateSubscriptionProductForm, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).updateSubscriptionProduct(id, foolCommerceDtoUpdateSubscriptionProductForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} productId
     * @param {FoolCommerceDtoUpdateSubscriptionProductLevelForm} [foolCommerceDtoUpdateSubscriptionProductLevelForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public updateSubscriptionProductLevel(productId: number, foolCommerceDtoUpdateSubscriptionProductLevelForm?: FoolCommerceDtoUpdateSubscriptionProductLevelForm, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).updateSubscriptionProductLevel(productId, foolCommerceDtoUpdateSubscriptionProductLevelForm, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductOfferApi - axios parameter creator
 * @export
 */
export const ProductOfferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get Active Premiums
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivePremiums: async (countryCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/offers/premiums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Active Product Offers
         * @param {string} [countryCode]
         * @param {'SingleItem' | 'Subscription' | 'Any'} [productOfferType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveProductOffers: async (countryCode?: string, productOfferType?: 'SingleItem' | 'Subscription' | 'Any', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/offers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (productOfferType !== undefined) {
                localVarQueryParameter['productOfferType'] = productOfferType;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductOfferApi - functional programming interface
 * @export
 */
export const ProductOfferApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductOfferApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Get Active Premiums
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivePremiums(countryCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoProductOffer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivePremiums(countryCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Active Product Offers
         * @param {string} [countryCode]
         * @param {'SingleItem' | 'Subscription' | 'Any'} [productOfferType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveProductOffers(countryCode?: string, productOfferType?: 'SingleItem' | 'Subscription' | 'Any', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoProductOffer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveProductOffers(countryCode, productOfferType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductOfferApi - factory interface
 * @export
 */
export const ProductOfferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductOfferApiFp(configuration)
    return {
        /**
         *
         * @summary Get Active Premiums
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivePremiums(countryCode?: string, options?: any): AxiosPromise<Array<FoolCommerceDtoProductOffer>> {
            return localVarFp.getActivePremiums(countryCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Active Product Offers
         * @param {string} [countryCode]
         * @param {'SingleItem' | 'Subscription' | 'Any'} [productOfferType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveProductOffers(countryCode?: string, productOfferType?: 'SingleItem' | 'Subscription' | 'Any', options?: any): AxiosPromise<Array<FoolCommerceDtoProductOffer>> {
            return localVarFp.getActiveProductOffers(countryCode, productOfferType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductOfferApi - object-oriented interface
 * @export
 * @class ProductOfferApi
 * @extends {BaseAPI}
 */
export class ProductOfferApi extends BaseAPI {
    /**
     *
     * @summary Get Active Premiums
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOfferApi
     */
    public getActivePremiums(countryCode?: string, options?: AxiosRequestConfig) {
        return ProductOfferApiFp(this.configuration).getActivePremiums(countryCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Active Product Offers
     * @param {string} [countryCode]
     * @param {'SingleItem' | 'Subscription' | 'Any'} [productOfferType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOfferApi
     */
    public getActiveProductOffers(countryCode?: string, productOfferType?: 'SingleItem' | 'Subscription' | 'Any', options?: AxiosRequestConfig) {
        return ProductOfferApiFp(this.configuration).getActiveProductOffers(countryCode, productOfferType, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PromotionApi - axios parameter creator
 * @export
 */
export const PromotionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create Promotion V1 ** General use Create Promotion call, currently used by admin-ui **
         * @param {FoolCommerceDtoCreatePromotionForm} [foolCommerceDtoCreatePromotionForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPromotion: async (foolCommerceDtoCreatePromotionForm?: FoolCommerceDtoCreatePromotionForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoCreatePromotionForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudienceTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/promotions/audience-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Promotion
         * @param {number} id
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPromotion: async (id: number, countryCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPromotion', 'id', id)
            const localVarPath = `/v1/promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Promotion By Code
         * @param {string} promotionCode
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPromotionByCode: async (promotionCode: string, countryCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotionCode' is not null or undefined
            assertParamExists('getPromotionByCode', 'promotionCode', promotionCode)
            const localVarPath = `/v1/promotions/{promotionCode}`
                .replace(`{${"promotionCode"}}`, encodeURIComponent(String(promotionCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List Promotions matching filter criteria.
         * @param {string} [name] Optionally filter on promotion name contains value.
         * @param {number} [limit] Optionally limit number of results.
         * @param {number} [offset] Optionally skip number of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPromotions: async (name?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a SolrSearchResponse given various query parameters
         * @param {string} [searchQuery]
         * @param {string} [countryCode]
         * @param {number} [rows]
         * @param {number} [startRow]
         * @param {boolean} [activeOnly]
         * @param {Array<string>} [premiumProductNames]
         * @param {string} [productName]
         * @param {string} [subscriptionTerm]
         * @param {number} [acquisitionPrice]
         * @param {number} [campaignId]
         * @param {Array<'NewMember' | 'Retention' | 'Acquisition'>} [audienceTypes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSolrOfferDocuments: async (searchQuery?: string, countryCode?: string, rows?: number, startRow?: number, activeOnly?: boolean, premiumProductNames?: Array<string>, productName?: string, subscriptionTerm?: string, acquisitionPrice?: number, campaignId?: number, audienceTypes?: Array<'NewMember' | 'Retention' | 'Acquisition'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/promotions/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchQuery !== undefined) {
                localVarQueryParameter['searchQuery'] = searchQuery;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (rows !== undefined) {
                localVarQueryParameter['rows'] = rows;
            }

            if (startRow !== undefined) {
                localVarQueryParameter['startRow'] = startRow;
            }

            if (activeOnly !== undefined) {
                localVarQueryParameter['activeOnly'] = activeOnly;
            }

            if (premiumProductNames) {
                localVarQueryParameter['premiumProductNames'] = premiumProductNames;
            }

            if (productName !== undefined) {
                localVarQueryParameter['productName'] = productName;
            }

            if (subscriptionTerm !== undefined) {
                localVarQueryParameter['subscriptionTerm'] = subscriptionTerm;
            }

            if (acquisitionPrice !== undefined) {
                localVarQueryParameter['acquisitionPrice'] = acquisitionPrice;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaignId'] = campaignId;
            }

            if (audienceTypes) {
                localVarQueryParameter['audienceTypes'] = audienceTypes;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Promotion V1 ** General use Update Promotion call, currently used by admin-ui **
         * @param {number} id
         * @param {FoolCommerceDtoUpdatePromotionForm} [foolCommerceDtoUpdatePromotionForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePromotion: async (id: number, foolCommerceDtoUpdatePromotionForm?: FoolCommerceDtoUpdatePromotionForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePromotion', 'id', id)
            const localVarPath = `/v1/promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoUpdatePromotionForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Single Item Offer (Update Promotion Offer)
         * @param {number} promotionId
         * @param {number} offerId
         * @param {string} [countryCode]
         * @param {FoolCommerceDtoUpdateOfferForm} [foolCommerceDtoUpdateOfferForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSingleItemOffer: async (promotionId: number, offerId: number, countryCode?: string, foolCommerceDtoUpdateOfferForm?: FoolCommerceDtoUpdateOfferForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotionId' is not null or undefined
            assertParamExists('updateSingleItemOffer', 'promotionId', promotionId)
            // verify required parameter 'offerId' is not null or undefined
            assertParamExists('updateSingleItemOffer', 'offerId', offerId)
            const localVarPath = `/v1/promotions/{promotionId}/offers/single-item/{offerId}`
                .replace(`{${"promotionId"}}`, encodeURIComponent(String(promotionId)))
                .replace(`{${"offerId"}}`, encodeURIComponent(String(offerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoUpdateOfferForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Subscription Offer (Update Promotion Offer)
         * @param {number} promotionId
         * @param {number} offerId
         * @param {string} [countryCode]
         * @param {FoolCommerceDtoUpdateOfferForm} [foolCommerceDtoUpdateOfferForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscriptionOffer: async (promotionId: number, offerId: number, countryCode?: string, foolCommerceDtoUpdateOfferForm?: FoolCommerceDtoUpdateOfferForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotionId' is not null or undefined
            assertParamExists('updateSubscriptionOffer', 'promotionId', promotionId)
            // verify required parameter 'offerId' is not null or undefined
            assertParamExists('updateSubscriptionOffer', 'offerId', offerId)
            const localVarPath = `/v1/promotions/{promotionId}/offers/subscription/{offerId}`
                .replace(`{${"promotionId"}}`, encodeURIComponent(String(promotionId)))
                .replace(`{${"offerId"}}`, encodeURIComponent(String(offerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoUpdateOfferForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromotionApi - functional programming interface
 * @export
 */
export const PromotionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromotionApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Create Promotion V1 ** General use Create Promotion call, currently used by admin-ui **
         * @param {FoolCommerceDtoCreatePromotionForm} [foolCommerceDtoCreatePromotionForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPromotion(foolCommerceDtoCreatePromotionForm?: FoolCommerceDtoCreatePromotionForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoPromotion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPromotion(foolCommerceDtoCreatePromotionForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudienceTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoAudienceTypeDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudienceTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Promotion
         * @param {number} id
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPromotion(id: number, countryCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoPromotion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPromotion(id, countryCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Promotion By Code
         * @param {string} promotionCode
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPromotionByCode(promotionCode: string, countryCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoPromotion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPromotionByCode(promotionCode, countryCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary List Promotions matching filter criteria.
         * @param {string} [name] Optionally filter on promotion name contains value.
         * @param {number} [limit] Optionally limit number of results.
         * @param {number} [offset] Optionally skip number of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPromotions(name?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoPromotionFoolCommerceVersion0000CultureneutralPublicKeyTokennull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPromotions(name, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get a SolrSearchResponse given various query parameters
         * @param {string} [searchQuery]
         * @param {string} [countryCode]
         * @param {number} [rows]
         * @param {number} [startRow]
         * @param {boolean} [activeOnly]
         * @param {Array<string>} [premiumProductNames]
         * @param {string} [productName]
         * @param {string} [subscriptionTerm]
         * @param {number} [acquisitionPrice]
         * @param {number} [campaignId]
         * @param {Array<'NewMember' | 'Retention' | 'Acquisition'>} [audienceTypes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSolrOfferDocuments(searchQuery?: string, countryCode?: string, rows?: number, startRow?: number, activeOnly?: boolean, premiumProductNames?: Array<string>, productName?: string, subscriptionTerm?: string, acquisitionPrice?: number, campaignId?: number, audienceTypes?: Array<'NewMember' | 'Retention' | 'Acquisition'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSolrSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSolrOfferDocuments(searchQuery, countryCode, rows, startRow, activeOnly, premiumProductNames, productName, subscriptionTerm, acquisitionPrice, campaignId, audienceTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update Promotion V1 ** General use Update Promotion call, currently used by admin-ui **
         * @param {number} id
         * @param {FoolCommerceDtoUpdatePromotionForm} [foolCommerceDtoUpdatePromotionForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePromotion(id: number, foolCommerceDtoUpdatePromotionForm?: FoolCommerceDtoUpdatePromotionForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoPromotion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePromotion(id, foolCommerceDtoUpdatePromotionForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update Single Item Offer (Update Promotion Offer)
         * @param {number} promotionId
         * @param {number} offerId
         * @param {string} [countryCode]
         * @param {FoolCommerceDtoUpdateOfferForm} [foolCommerceDtoUpdateOfferForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSingleItemOffer(promotionId: number, offerId: number, countryCode?: string, foolCommerceDtoUpdateOfferForm?: FoolCommerceDtoUpdateOfferForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoOffer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSingleItemOffer(promotionId, offerId, countryCode, foolCommerceDtoUpdateOfferForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update Subscription Offer (Update Promotion Offer)
         * @param {number} promotionId
         * @param {number} offerId
         * @param {string} [countryCode]
         * @param {FoolCommerceDtoUpdateOfferForm} [foolCommerceDtoUpdateOfferForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscriptionOffer(promotionId: number, offerId: number, countryCode?: string, foolCommerceDtoUpdateOfferForm?: FoolCommerceDtoUpdateOfferForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSubscriptionOffer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscriptionOffer(promotionId, offerId, countryCode, foolCommerceDtoUpdateOfferForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PromotionApi - factory interface
 * @export
 */
export const PromotionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromotionApiFp(configuration)
    return {
        /**
         *
         * @summary Create Promotion V1 ** General use Create Promotion call, currently used by admin-ui **
         * @param {FoolCommerceDtoCreatePromotionForm} [foolCommerceDtoCreatePromotionForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPromotion(foolCommerceDtoCreatePromotionForm?: FoolCommerceDtoCreatePromotionForm, options?: any): AxiosPromise<FoolCommerceDtoPromotion> {
            return localVarFp.createPromotion(foolCommerceDtoCreatePromotionForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudienceTypes(options?: any): AxiosPromise<Array<FoolCommerceDtoAudienceTypeDTO>> {
            return localVarFp.getAudienceTypes(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Promotion
         * @param {number} id
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPromotion(id: number, countryCode?: string, options?: any): AxiosPromise<FoolCommerceDtoPromotion> {
            return localVarFp.getPromotion(id, countryCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Promotion By Code
         * @param {string} promotionCode
         * @param {string} [countryCode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPromotionByCode(promotionCode: string, countryCode?: string, options?: any): AxiosPromise<FoolCommerceDtoPromotion> {
            return localVarFp.getPromotionByCode(promotionCode, countryCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List Promotions matching filter criteria.
         * @param {string} [name] Optionally filter on promotion name contains value.
         * @param {number} [limit] Optionally limit number of results.
         * @param {number} [offset] Optionally skip number of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPromotions(name?: string, limit?: number, offset?: number, options?: any): AxiosPromise<FoolCommerceDtoHelpersPaginationResults1FoolCommerceDtoPromotionFoolCommerceVersion0000CultureneutralPublicKeyTokennull> {
            return localVarFp.listPromotions(name, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a SolrSearchResponse given various query parameters
         * @param {string} [searchQuery]
         * @param {string} [countryCode]
         * @param {number} [rows]
         * @param {number} [startRow]
         * @param {boolean} [activeOnly]
         * @param {Array<string>} [premiumProductNames]
         * @param {string} [productName]
         * @param {string} [subscriptionTerm]
         * @param {number} [acquisitionPrice]
         * @param {number} [campaignId]
         * @param {Array<'NewMember' | 'Retention' | 'Acquisition'>} [audienceTypes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSolrOfferDocuments(searchQuery?: string, countryCode?: string, rows?: number, startRow?: number, activeOnly?: boolean, premiumProductNames?: Array<string>, productName?: string, subscriptionTerm?: string, acquisitionPrice?: number, campaignId?: number, audienceTypes?: Array<'NewMember' | 'Retention' | 'Acquisition'>, options?: any): AxiosPromise<FoolCommerceDtoSolrSearchResponse> {
            return localVarFp.searchSolrOfferDocuments(searchQuery, countryCode, rows, startRow, activeOnly, premiumProductNames, productName, subscriptionTerm, acquisitionPrice, campaignId, audienceTypes, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update Promotion V1 ** General use Update Promotion call, currently used by admin-ui **
         * @param {number} id
         * @param {FoolCommerceDtoUpdatePromotionForm} [foolCommerceDtoUpdatePromotionForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePromotion(id: number, foolCommerceDtoUpdatePromotionForm?: FoolCommerceDtoUpdatePromotionForm, options?: any): AxiosPromise<FoolCommerceDtoPromotion> {
            return localVarFp.updatePromotion(id, foolCommerceDtoUpdatePromotionForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update Single Item Offer (Update Promotion Offer)
         * @param {number} promotionId
         * @param {number} offerId
         * @param {string} [countryCode]
         * @param {FoolCommerceDtoUpdateOfferForm} [foolCommerceDtoUpdateOfferForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSingleItemOffer(promotionId: number, offerId: number, countryCode?: string, foolCommerceDtoUpdateOfferForm?: FoolCommerceDtoUpdateOfferForm, options?: any): AxiosPromise<FoolCommerceDtoOffer> {
            return localVarFp.updateSingleItemOffer(promotionId, offerId, countryCode, foolCommerceDtoUpdateOfferForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update Subscription Offer (Update Promotion Offer)
         * @param {number} promotionId
         * @param {number} offerId
         * @param {string} [countryCode]
         * @param {FoolCommerceDtoUpdateOfferForm} [foolCommerceDtoUpdateOfferForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscriptionOffer(promotionId: number, offerId: number, countryCode?: string, foolCommerceDtoUpdateOfferForm?: FoolCommerceDtoUpdateOfferForm, options?: any): AxiosPromise<FoolCommerceDtoSubscriptionOffer> {
            return localVarFp.updateSubscriptionOffer(promotionId, offerId, countryCode, foolCommerceDtoUpdateOfferForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PromotionApi - object-oriented interface
 * @export
 * @class PromotionApi
 * @extends {BaseAPI}
 */
export class PromotionApi extends BaseAPI {
    /**
     *
     * @summary Create Promotion V1 ** General use Create Promotion call, currently used by admin-ui **
     * @param {FoolCommerceDtoCreatePromotionForm} [foolCommerceDtoCreatePromotionForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public createPromotion(foolCommerceDtoCreatePromotionForm?: FoolCommerceDtoCreatePromotionForm, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).createPromotion(foolCommerceDtoCreatePromotionForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public getAudienceTypes(options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).getAudienceTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Promotion
     * @param {number} id
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public getPromotion(id: number, countryCode?: string, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).getPromotion(id, countryCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Promotion By Code
     * @param {string} promotionCode
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public getPromotionByCode(promotionCode: string, countryCode?: string, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).getPromotionByCode(promotionCode, countryCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary List Promotions matching filter criteria.
     * @param {string} [name] Optionally filter on promotion name contains value.
     * @param {number} [limit] Optionally limit number of results.
     * @param {number} [offset] Optionally skip number of results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public listPromotions(name?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).listPromotions(name, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a SolrSearchResponse given various query parameters
     * @param {string} [searchQuery]
     * @param {string} [countryCode]
     * @param {number} [rows]
     * @param {number} [startRow]
     * @param {boolean} [activeOnly]
     * @param {Array<string>} [premiumProductNames]
     * @param {string} [productName]
     * @param {string} [subscriptionTerm]
     * @param {number} [acquisitionPrice]
     * @param {number} [campaignId]
     * @param {Array<'NewMember' | 'Retention' | 'Acquisition'>} [audienceTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public searchSolrOfferDocuments(searchQuery?: string, countryCode?: string, rows?: number, startRow?: number, activeOnly?: boolean, premiumProductNames?: Array<string>, productName?: string, subscriptionTerm?: string, acquisitionPrice?: number, campaignId?: number, audienceTypes?: Array<'NewMember' | 'Retention' | 'Acquisition'>, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).searchSolrOfferDocuments(searchQuery, countryCode, rows, startRow, activeOnly, premiumProductNames, productName, subscriptionTerm, acquisitionPrice, campaignId, audienceTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update Promotion V1 ** General use Update Promotion call, currently used by admin-ui **
     * @param {number} id
     * @param {FoolCommerceDtoUpdatePromotionForm} [foolCommerceDtoUpdatePromotionForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public updatePromotion(id: number, foolCommerceDtoUpdatePromotionForm?: FoolCommerceDtoUpdatePromotionForm, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).updatePromotion(id, foolCommerceDtoUpdatePromotionForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update Single Item Offer (Update Promotion Offer)
     * @param {number} promotionId
     * @param {number} offerId
     * @param {string} [countryCode]
     * @param {FoolCommerceDtoUpdateOfferForm} [foolCommerceDtoUpdateOfferForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public updateSingleItemOffer(promotionId: number, offerId: number, countryCode?: string, foolCommerceDtoUpdateOfferForm?: FoolCommerceDtoUpdateOfferForm, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).updateSingleItemOffer(promotionId, offerId, countryCode, foolCommerceDtoUpdateOfferForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update Subscription Offer (Update Promotion Offer)
     * @param {number} promotionId
     * @param {number} offerId
     * @param {string} [countryCode]
     * @param {FoolCommerceDtoUpdateOfferForm} [foolCommerceDtoUpdateOfferForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public updateSubscriptionOffer(promotionId: number, offerId: number, countryCode?: string, foolCommerceDtoUpdateOfferForm?: FoolCommerceDtoUpdateOfferForm, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).updateSubscriptionOffer(promotionId, offerId, countryCode, foolCommerceDtoUpdateOfferForm, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProxyApi - axios parameter creator
 * @export
 */
export const ProxyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Let\'s do the Proxy!
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxy: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/proxy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProxyApi - functional programming interface
 * @export
 */
export const ProxyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProxyApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Let\'s do the Proxy!
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proxy(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.proxy(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProxyApi - factory interface
 * @export
 */
export const ProxyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProxyApiFp(configuration)
    return {
        /**
         *
         * @summary Let\'s do the Proxy!
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxy(body?: string, options?: any): AxiosPromise<void> {
            return localVarFp.proxy(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProxyApi - object-oriented interface
 * @export
 * @class ProxyApi
 * @extends {BaseAPI}
 */
export class ProxyApi extends BaseAPI {
    /**
     *
     * @summary Let\'s do the Proxy!
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyApi
     */
    public proxy(body?: string, options?: AxiosRequestConfig) {
        return ProxyApiFp(this.configuration).proxy(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * QuoteApi - axios parameter creator
 * @export
 */
export const QuoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Returns quote information for a user
         * @param {string} promotionCode Promotion code as GUID
         * @param {string} [countryCode] The country code ({\&quot;US\&quot;}) by default.
         * @param {number} [uid] User id
         * @param {boolean} [ignoreRedirect] If true, ignore any redirect set on this promo
         * @param {boolean} [ignoreInactive] If true and if the promo has passed its end date, show it anyway
         * @param {boolean} [performTaxLookup]
         * @param {string} [orderType]
         * @param {string} [accountId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPromotionQuote: async (promotionCode: string, countryCode?: string, uid?: number, ignoreRedirect?: boolean, ignoreInactive?: boolean, performTaxLookup?: boolean, orderType?: string, accountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotionCode' is not null or undefined
            assertParamExists('getPromotionQuote', 'promotionCode', promotionCode)
            const localVarPath = `/v1/quotes/{promotionCode}`
                .replace(`{${"promotionCode"}}`, encodeURIComponent(String(promotionCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (ignoreRedirect !== undefined) {
                localVarQueryParameter['ignoreRedirect'] = ignoreRedirect;
            }

            if (ignoreInactive !== undefined) {
                localVarQueryParameter['ignoreInactive'] = ignoreInactive;
            }

            if (performTaxLookup !== undefined) {
                localVarQueryParameter['performTaxLookup'] = performTaxLookup;
            }

            if (orderType !== undefined) {
                localVarQueryParameter['orderType'] = orderType;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Promotion Quote for specific Tax Address
         * @param {FoolCommerceDtoAddressSpecificQuoteRequest} [foolCommerceDtoAddressSpecificQuoteRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPromotionQuoteByTaxAddress: async (foolCommerceDtoAddressSpecificQuoteRequest?: FoolCommerceDtoAddressSpecificQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/quotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoAddressSpecificQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuoteApi - functional programming interface
 * @export
 */
export const QuoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuoteApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Returns quote information for a user
         * @param {string} promotionCode Promotion code as GUID
         * @param {string} [countryCode] The country code ({\&quot;US\&quot;}) by default.
         * @param {number} [uid] User id
         * @param {boolean} [ignoreRedirect] If true, ignore any redirect set on this promo
         * @param {boolean} [ignoreInactive] If true and if the promo has passed its end date, show it anyway
         * @param {boolean} [performTaxLookup]
         * @param {string} [orderType]
         * @param {string} [accountId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPromotionQuote(promotionCode: string, countryCode?: string, uid?: number, ignoreRedirect?: boolean, ignoreInactive?: boolean, performTaxLookup?: boolean, orderType?: string, accountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoPromotionQuoteDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPromotionQuote(promotionCode, countryCode, uid, ignoreRedirect, ignoreInactive, performTaxLookup, orderType, accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Promotion Quote for specific Tax Address
         * @param {FoolCommerceDtoAddressSpecificQuoteRequest} [foolCommerceDtoAddressSpecificQuoteRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestPromotionQuoteByTaxAddress(foolCommerceDtoAddressSpecificQuoteRequest?: FoolCommerceDtoAddressSpecificQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoPromotionQuoteDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestPromotionQuoteByTaxAddress(foolCommerceDtoAddressSpecificQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuoteApi - factory interface
 * @export
 */
export const QuoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuoteApiFp(configuration)
    return {
        /**
         *
         * @summary Returns quote information for a user
         * @param {string} promotionCode Promotion code as GUID
         * @param {string} [countryCode] The country code ({\&quot;US\&quot;}) by default.
         * @param {number} [uid] User id
         * @param {boolean} [ignoreRedirect] If true, ignore any redirect set on this promo
         * @param {boolean} [ignoreInactive] If true and if the promo has passed its end date, show it anyway
         * @param {boolean} [performTaxLookup]
         * @param {string} [orderType]
         * @param {string} [accountId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPromotionQuote(promotionCode: string, countryCode?: string, uid?: number, ignoreRedirect?: boolean, ignoreInactive?: boolean, performTaxLookup?: boolean, orderType?: string, accountId?: string, options?: any): AxiosPromise<FoolCommerceDtoPromotionQuoteDTO> {
            return localVarFp.getPromotionQuote(promotionCode, countryCode, uid, ignoreRedirect, ignoreInactive, performTaxLookup, orderType, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Promotion Quote for specific Tax Address
         * @param {FoolCommerceDtoAddressSpecificQuoteRequest} [foolCommerceDtoAddressSpecificQuoteRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPromotionQuoteByTaxAddress(foolCommerceDtoAddressSpecificQuoteRequest?: FoolCommerceDtoAddressSpecificQuoteRequest, options?: any): AxiosPromise<FoolCommerceDtoPromotionQuoteDTO> {
            return localVarFp.requestPromotionQuoteByTaxAddress(foolCommerceDtoAddressSpecificQuoteRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuoteApi - object-oriented interface
 * @export
 * @class QuoteApi
 * @extends {BaseAPI}
 */
export class QuoteApi extends BaseAPI {
    /**
     *
     * @summary Returns quote information for a user
     * @param {string} promotionCode Promotion code as GUID
     * @param {string} [countryCode] The country code ({\&quot;US\&quot;}) by default.
     * @param {number} [uid] User id
     * @param {boolean} [ignoreRedirect] If true, ignore any redirect set on this promo
     * @param {boolean} [ignoreInactive] If true and if the promo has passed its end date, show it anyway
     * @param {boolean} [performTaxLookup]
     * @param {string} [orderType]
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public getPromotionQuote(promotionCode: string, countryCode?: string, uid?: number, ignoreRedirect?: boolean, ignoreInactive?: boolean, performTaxLookup?: boolean, orderType?: string, accountId?: string, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).getPromotionQuote(promotionCode, countryCode, uid, ignoreRedirect, ignoreInactive, performTaxLookup, orderType, accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Promotion Quote for specific Tax Address
     * @param {FoolCommerceDtoAddressSpecificQuoteRequest} [foolCommerceDtoAddressSpecificQuoteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApi
     */
    public requestPromotionQuoteByTaxAddress(foolCommerceDtoAddressSpecificQuoteRequest?: FoolCommerceDtoAddressSpecificQuoteRequest, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).requestPromotionQuoteByTaxAddress(foolCommerceDtoAddressSpecificQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RefundApi - axios parameter creator
 * @export
 */
export const RefundApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Refund Single Item V1 ** Please use Refund Single Item V2 **
         * @param {FoolCommerceDtoSingleItemRefundForm} [foolCommerceDtoSingleItemRefundForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundSingleItem: async (foolCommerceDtoSingleItemRefundForm?: FoolCommerceDtoSingleItemRefundForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/refunds/single-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoSingleItemRefundForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Refund Subscription Period V1 ** Please use Refund Subscription Period V2 **
         * @param {FoolCommerceDtoSubscriptionPeriodRefundForm} [foolCommerceDtoSubscriptionPeriodRefundForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundSubscriptionPeriod: async (foolCommerceDtoSubscriptionPeriodRefundForm?: FoolCommerceDtoSubscriptionPeriodRefundForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/refunds/subscription-periods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoSubscriptionPeriodRefundForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Rolls back and Refunds an Upgraded Subscription
         * @param {FoolCommerceDtoSubscriptionTransferRollbackForm} [foolCommerceDtoSubscriptionTransferRollbackForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackAndRefundSubscriptionUpgrade: async (foolCommerceDtoSubscriptionTransferRollbackForm?: FoolCommerceDtoSubscriptionTransferRollbackForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/refunds/subscription-rollback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoSubscriptionTransferRollbackForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefundApi - functional programming interface
 * @export
 */
export const RefundApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RefundApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Refund Single Item V1 ** Please use Refund Single Item V2 **
         * @param {FoolCommerceDtoSingleItemRefundForm} [foolCommerceDtoSingleItemRefundForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundSingleItem(foolCommerceDtoSingleItemRefundForm?: FoolCommerceDtoSingleItemRefundForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoRefund>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundSingleItem(foolCommerceDtoSingleItemRefundForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Refund Subscription Period V1 ** Please use Refund Subscription Period V2 **
         * @param {FoolCommerceDtoSubscriptionPeriodRefundForm} [foolCommerceDtoSubscriptionPeriodRefundForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundSubscriptionPeriod(foolCommerceDtoSubscriptionPeriodRefundForm?: FoolCommerceDtoSubscriptionPeriodRefundForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoRefund>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundSubscriptionPeriod(foolCommerceDtoSubscriptionPeriodRefundForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Rolls back and Refunds an Upgraded Subscription
         * @param {FoolCommerceDtoSubscriptionTransferRollbackForm} [foolCommerceDtoSubscriptionTransferRollbackForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rollbackAndRefundSubscriptionUpgrade(foolCommerceDtoSubscriptionTransferRollbackForm?: FoolCommerceDtoSubscriptionTransferRollbackForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoRefund>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rollbackAndRefundSubscriptionUpgrade(foolCommerceDtoSubscriptionTransferRollbackForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RefundApi - factory interface
 * @export
 */
export const RefundApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RefundApiFp(configuration)
    return {
        /**
         *
         * @summary Refund Single Item V1 ** Please use Refund Single Item V2 **
         * @param {FoolCommerceDtoSingleItemRefundForm} [foolCommerceDtoSingleItemRefundForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundSingleItem(foolCommerceDtoSingleItemRefundForm?: FoolCommerceDtoSingleItemRefundForm, options?: any): AxiosPromise<FoolCommerceDtoRefund> {
            return localVarFp.refundSingleItem(foolCommerceDtoSingleItemRefundForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Refund Subscription Period V1 ** Please use Refund Subscription Period V2 **
         * @param {FoolCommerceDtoSubscriptionPeriodRefundForm} [foolCommerceDtoSubscriptionPeriodRefundForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundSubscriptionPeriod(foolCommerceDtoSubscriptionPeriodRefundForm?: FoolCommerceDtoSubscriptionPeriodRefundForm, options?: any): AxiosPromise<FoolCommerceDtoRefund> {
            return localVarFp.refundSubscriptionPeriod(foolCommerceDtoSubscriptionPeriodRefundForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Rolls back and Refunds an Upgraded Subscription
         * @param {FoolCommerceDtoSubscriptionTransferRollbackForm} [foolCommerceDtoSubscriptionTransferRollbackForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackAndRefundSubscriptionUpgrade(foolCommerceDtoSubscriptionTransferRollbackForm?: FoolCommerceDtoSubscriptionTransferRollbackForm, options?: any): AxiosPromise<FoolCommerceDtoRefund> {
            return localVarFp.rollbackAndRefundSubscriptionUpgrade(foolCommerceDtoSubscriptionTransferRollbackForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RefundApi - object-oriented interface
 * @export
 * @class RefundApi
 * @extends {BaseAPI}
 */
export class RefundApi extends BaseAPI {
    /**
     *
     * @summary Refund Single Item V1 ** Please use Refund Single Item V2 **
     * @param {FoolCommerceDtoSingleItemRefundForm} [foolCommerceDtoSingleItemRefundForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundApi
     */
    public refundSingleItem(foolCommerceDtoSingleItemRefundForm?: FoolCommerceDtoSingleItemRefundForm, options?: AxiosRequestConfig) {
        return RefundApiFp(this.configuration).refundSingleItem(foolCommerceDtoSingleItemRefundForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Refund Subscription Period V1 ** Please use Refund Subscription Period V2 **
     * @param {FoolCommerceDtoSubscriptionPeriodRefundForm} [foolCommerceDtoSubscriptionPeriodRefundForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundApi
     */
    public refundSubscriptionPeriod(foolCommerceDtoSubscriptionPeriodRefundForm?: FoolCommerceDtoSubscriptionPeriodRefundForm, options?: AxiosRequestConfig) {
        return RefundApiFp(this.configuration).refundSubscriptionPeriod(foolCommerceDtoSubscriptionPeriodRefundForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Rolls back and Refunds an Upgraded Subscription
     * @param {FoolCommerceDtoSubscriptionTransferRollbackForm} [foolCommerceDtoSubscriptionTransferRollbackForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundApi
     */
    public rollbackAndRefundSubscriptionUpgrade(foolCommerceDtoSubscriptionTransferRollbackForm?: FoolCommerceDtoSubscriptionTransferRollbackForm, options?: AxiosRequestConfig) {
        return RefundApiFp(this.configuration).rollbackAndRefundSubscriptionUpgrade(foolCommerceDtoSubscriptionTransferRollbackForm, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SingleItemApi - axios parameter creator
 * @export
 */
export const SingleItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Cancel single item given its ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSingleItem: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancelSingleItem', 'id', id)
            const localVarPath = `/v1/single-items/cancel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get single item by its ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleItem: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSingleItem', 'id', id)
            const localVarPath = `/v1/single-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SingleItemApi - functional programming interface
 * @export
 */
export const SingleItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SingleItemApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Cancel single item given its ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSingleItem(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSingleItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSingleItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get single item by its ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleItem(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSingleItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SingleItemApi - factory interface
 * @export
 */
export const SingleItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SingleItemApiFp(configuration)
    return {
        /**
         *
         * @summary Cancel single item given its ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSingleItem(id: number, options?: any): AxiosPromise<FoolCommerceDtoSingleItem> {
            return localVarFp.cancelSingleItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get single item by its ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleItem(id: number, options?: any): AxiosPromise<FoolCommerceDtoSingleItem> {
            return localVarFp.getSingleItem(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SingleItemApi - object-oriented interface
 * @export
 * @class SingleItemApi
 * @extends {BaseAPI}
 */
export class SingleItemApi extends BaseAPI {
    /**
     *
     * @summary Cancel single item given its ID
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SingleItemApi
     */
    public cancelSingleItem(id: number, options?: AxiosRequestConfig) {
        return SingleItemApiFp(this.configuration).cancelSingleItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get single item by its ID
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SingleItemApi
     */
    public getSingleItem(id: number, options?: AxiosRequestConfig) {
        return SingleItemApiFp(this.configuration).getSingleItem(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SubscriptionApi - axios parameter creator
 * @export
 */
export const SubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Expire with optional date specified, if specified, must be on or before last active period. Defaults to  expiration date of last active period.
         * @param {number} [subscriptionId] id of the subscription to expire
         * @param {string} [lastActiveDateTime] date to expire the subscription on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expireSubscription: async (subscriptionId?: number, lastActiveDateTime?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subscriptions/expire-subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subscriptionId !== undefined) {
                localVarQueryParameter['subscriptionId'] = subscriptionId;
            }

            if (lastActiveDateTime !== undefined) {
                localVarQueryParameter['lastActiveDateTime'] = (lastActiveDateTime as any instanceof Date) ?
                    (lastActiveDateTime as any).toISOString() :
                    lastActiveDateTime;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get subscription by its ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSubscription', 'id', id)
            const localVarPath = `/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} subscriptionPeriodId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionPeriodReceipt: async (subscriptionPeriodId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionPeriodId' is not null or undefined
            assertParamExists('getSubscriptionPeriodReceipt', 'subscriptionPeriodId', subscriptionPeriodId)
            const localVarPath = `/v1/subscriptions/periods/{subscriptionPeriodId}/receipt`
                .replace(`{${"subscriptionPeriodId"}}`, encodeURIComponent(String(subscriptionPeriodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get subscription transaction by subscription ID
         * @param {number} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionTransaction: async (subscriptionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('getSubscriptionTransaction', 'subscriptionId', subscriptionId)
            const localVarPath = `/v1/subscriptions/transactions/{subscriptionId}`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a quote for subscription rollback
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionTransferRollbackQuote: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSubscriptionTransferRollbackQuote', 'id', id)
            const localVarPath = `/v1/subscriptions/{id}/rollback`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Provides a list of subscription id\'s ready for renewal and user id\'s to update the credit card info.  This allows for end-to-end testing by updating the credit card for the subscription.
         * @param {number} [numberNeeded] the number you need for immediate testing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionIdsForCreditCardTesting: async (numberNeeded?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subscriptions/user-subscriptions-for-testing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (numberNeeded !== undefined) {
                localVarQueryParameter['numberNeeded'] = numberNeeded;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Turn off autorebill for all subscriptions for a set of UIDs
         * @param {number} [adminUid]
         * @param {Array<number>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        turnOffAutoRebillForMembers: async (adminUid?: number, requestBody?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subscriptions/turn-off-auto-rebill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (adminUid !== undefined) {
                localVarQueryParameter['adminUid'] = adminUid;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionApi - functional programming interface
 * @export
 */
export const SubscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Expire with optional date specified, if specified, must be on or before last active period. Defaults to  expiration date of last active period.
         * @param {number} [subscriptionId] id of the subscription to expire
         * @param {string} [lastActiveDateTime] date to expire the subscription on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expireSubscription(subscriptionId?: number, lastActiveDateTime?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expireSubscription(subscriptionId, lastActiveDateTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get subscription by its ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscription(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSubscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscription(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} subscriptionPeriodId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionPeriodReceipt(subscriptionPeriodId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSubscriptionPeriodReceipt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptionPeriodReceipt(subscriptionPeriodId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get subscription transaction by subscription ID
         * @param {number} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionTransaction(subscriptionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoSubscriptionTransaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptionTransaction(subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get a quote for subscription rollback
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionTransferRollbackQuote(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoSubscriptionTransferRollbackQuote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptionTransferRollbackQuote(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Provides a list of subscription id\'s ready for renewal and user id\'s to update the credit card info.  This allows for end-to-end testing by updating the credit card for the subscription.
         * @param {number} [numberNeeded] the number you need for immediate testing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionIdsForCreditCardTesting(numberNeeded?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoV2SubscriptionForTest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionIdsForCreditCardTesting(numberNeeded, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Turn off autorebill for all subscriptions for a set of UIDs
         * @param {number} [adminUid]
         * @param {Array<number>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async turnOffAutoRebillForMembers(adminUid?: number, requestBody?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoSubscription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.turnOffAutoRebillForMembers(adminUid, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriptionApi - factory interface
 * @export
 */
export const SubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionApiFp(configuration)
    return {
        /**
         *
         * @summary Expire with optional date specified, if specified, must be on or before last active period. Defaults to  expiration date of last active period.
         * @param {number} [subscriptionId] id of the subscription to expire
         * @param {string} [lastActiveDateTime] date to expire the subscription on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expireSubscription(subscriptionId?: number, lastActiveDateTime?: string, options?: any): AxiosPromise<number> {
            return localVarFp.expireSubscription(subscriptionId, lastActiveDateTime, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get subscription by its ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription(id: number, options?: any): AxiosPromise<FoolCommerceDtoSubscription> {
            return localVarFp.getSubscription(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} subscriptionPeriodId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionPeriodReceipt(subscriptionPeriodId: number, options?: any): AxiosPromise<FoolCommerceDtoSubscriptionPeriodReceipt> {
            return localVarFp.getSubscriptionPeriodReceipt(subscriptionPeriodId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get subscription transaction by subscription ID
         * @param {number} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionTransaction(subscriptionId: number, options?: any): AxiosPromise<Array<FoolCommerceDtoSubscriptionTransaction>> {
            return localVarFp.getSubscriptionTransaction(subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a quote for subscription rollback
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionTransferRollbackQuote(id: number, options?: any): AxiosPromise<FoolCommerceDtoSubscriptionTransferRollbackQuote> {
            return localVarFp.getSubscriptionTransferRollbackQuote(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Provides a list of subscription id\'s ready for renewal and user id\'s to update the credit card info.  This allows for end-to-end testing by updating the credit card for the subscription.
         * @param {number} [numberNeeded] the number you need for immediate testing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionIdsForCreditCardTesting(numberNeeded?: number, options?: any): AxiosPromise<FoolCommerceDtoV2SubscriptionForTest> {
            return localVarFp.listSubscriptionIdsForCreditCardTesting(numberNeeded, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Turn off autorebill for all subscriptions for a set of UIDs
         * @param {number} [adminUid]
         * @param {Array<number>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        turnOffAutoRebillForMembers(adminUid?: number, requestBody?: Array<number>, options?: any): AxiosPromise<Array<FoolCommerceDtoSubscription>> {
            return localVarFp.turnOffAutoRebillForMembers(adminUid, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubscriptionApi - object-oriented interface
 * @export
 * @class SubscriptionApi
 * @extends {BaseAPI}
 */
export class SubscriptionApi extends BaseAPI {
    /**
     *
     * @summary Expire with optional date specified, if specified, must be on or before last active period. Defaults to  expiration date of last active period.
     * @param {number} [subscriptionId] id of the subscription to expire
     * @param {string} [lastActiveDateTime] date to expire the subscription on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public expireSubscription(subscriptionId?: number, lastActiveDateTime?: string, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).expireSubscription(subscriptionId, lastActiveDateTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get subscription by its ID
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public getSubscription(id: number, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).getSubscription(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} subscriptionPeriodId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public getSubscriptionPeriodReceipt(subscriptionPeriodId: number, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).getSubscriptionPeriodReceipt(subscriptionPeriodId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get subscription transaction by subscription ID
     * @param {number} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public getSubscriptionTransaction(subscriptionId: number, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).getSubscriptionTransaction(subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a quote for subscription rollback
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public getSubscriptionTransferRollbackQuote(id: number, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).getSubscriptionTransferRollbackQuote(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Provides a list of subscription id\'s ready for renewal and user id\'s to update the credit card info.  This allows for end-to-end testing by updating the credit card for the subscription.
     * @param {number} [numberNeeded] the number you need for immediate testing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public listSubscriptionIdsForCreditCardTesting(numberNeeded?: number, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).listSubscriptionIdsForCreditCardTesting(numberNeeded, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Turn off autorebill for all subscriptions for a set of UIDs
     * @param {number} [adminUid]
     * @param {Array<number>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public turnOffAutoRebillForMembers(adminUid?: number, requestBody?: Array<number>, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).turnOffAutoRebillForMembers(adminUid, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TimePeriodApi - axios parameter creator
 * @export
 */
export const TimePeriodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get Money Back Guarantee Time Periods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMoneyBackGuaranteeTimePeriods: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/timeperiods/moneybackguarantee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a TimePeriod matching the given parameters or create one and return it.
         * @param {FoolCommerceDtoTimePeriodForm} [foolCommerceDtoTimePeriodForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrCreateTimePeriod: async (foolCommerceDtoTimePeriodForm?: FoolCommerceDtoTimePeriodForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/timeperiods/get-or-create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foolCommerceDtoTimePeriodForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Trial Time Periods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrialTimePeriods: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/timeperiods/trial`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimePeriodApi - functional programming interface
 * @export
 */
export const TimePeriodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimePeriodApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Get Money Back Guarantee Time Periods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMoneyBackGuaranteeTimePeriods(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoTimePeriod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMoneyBackGuaranteeTimePeriods(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get a TimePeriod matching the given parameters or create one and return it.
         * @param {FoolCommerceDtoTimePeriodForm} [foolCommerceDtoTimePeriodForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrCreateTimePeriod(foolCommerceDtoTimePeriodForm?: FoolCommerceDtoTimePeriodForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoolCommerceDtoTimePeriod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateTimePeriod(foolCommerceDtoTimePeriodForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Trial Time Periods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrialTimePeriods(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoolCommerceDtoTimePeriod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrialTimePeriods(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimePeriodApi - factory interface
 * @export
 */
export const TimePeriodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimePeriodApiFp(configuration)
    return {
        /**
         *
         * @summary Get Money Back Guarantee Time Periods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMoneyBackGuaranteeTimePeriods(options?: any): AxiosPromise<Array<FoolCommerceDtoTimePeriod>> {
            return localVarFp.getMoneyBackGuaranteeTimePeriods(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a TimePeriod matching the given parameters or create one and return it.
         * @param {FoolCommerceDtoTimePeriodForm} [foolCommerceDtoTimePeriodForm]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrCreateTimePeriod(foolCommerceDtoTimePeriodForm?: FoolCommerceDtoTimePeriodForm, options?: any): AxiosPromise<FoolCommerceDtoTimePeriod> {
            return localVarFp.getOrCreateTimePeriod(foolCommerceDtoTimePeriodForm, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Trial Time Periods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrialTimePeriods(options?: any): AxiosPromise<Array<FoolCommerceDtoTimePeriod>> {
            return localVarFp.getTrialTimePeriods(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TimePeriodApi - object-oriented interface
 * @export
 * @class TimePeriodApi
 * @extends {BaseAPI}
 */
export class TimePeriodApi extends BaseAPI {
    /**
     *
     * @summary Get Money Back Guarantee Time Periods
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimePeriodApi
     */
    public getMoneyBackGuaranteeTimePeriods(options?: AxiosRequestConfig) {
        return TimePeriodApiFp(this.configuration).getMoneyBackGuaranteeTimePeriods(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a TimePeriod matching the given parameters or create one and return it.
     * @param {FoolCommerceDtoTimePeriodForm} [foolCommerceDtoTimePeriodForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimePeriodApi
     */
    public getOrCreateTimePeriod(foolCommerceDtoTimePeriodForm?: FoolCommerceDtoTimePeriodForm, options?: AxiosRequestConfig) {
        return TimePeriodApiFp(this.configuration).getOrCreateTimePeriod(foolCommerceDtoTimePeriodForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Trial Time Periods
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimePeriodApi
     */
    public getTrialTimePeriods(options?: AxiosRequestConfig) {
        return TimePeriodApiFp(this.configuration).getTrialTimePeriods(options).then((request) => request(this.axios, this.basePath));
    }
}
